{
  "week": 8,
  "overall_topic": "Digital Forensics Analysis and Validation. Virtual Machine Forensics, Live Acquisitions and Cloud Forensics.",
  "weekly_slide_summary": {
    "total_slides_for_week": 36,
    "total_framework_slides": 4,
    "total_content_slides": 26,
    "total_interactive_slides": 6,
    "number_of_decks": 1
  },
  "weekly_time_summary_minutes": {
    "total_time_for_week_minutes": 114,
    "total_framework_time": 6,
    "total_content_and_interactive_time": 108
  },
  "deck_plans": [
    {
      "deck_number": 1,
      "total_slides_in_deck": 36,
      "slide_count_breakdown": {
        "framework": 4,
        "content": 26,
        "interactive": 6
      },
      "time_breakdown_minutes": {
        "framework": 6,
        "content_and_interactive": 108,
        "total_deck_time": 114
      },
      "sections": [
        {
          "section_type": "Title",
          "content": {
            "unit_name": "Digital Forensic",
            "unit_code": "ICT312",
            "week_topic": "Digital Forensics Analysis and Validation. Virtual Machine Forensics, Live Acquisitions and Cloud Forensics.",
            "deck_title": "Week 8, Lecture 1"
          },
          "seq_id": 0
        },
        {
          "section_type": "Agenda",
          "content": {
            "title": "Today's Agenda",
            "items": [
              "Determining What Data to Collect and Analyze",
              "Validating Forensic Data",
              "Addressing Data-Hiding Techniques",
              "An Overview of Virtual Machine Forensics",
              "Performing Live Acquisitions",
              "Network Forensics Overview"
            ]
          },
          "seq_id": 1
        },
        {
          "section_type": "Content",
          "content_blocks": [
            {
              "title": "Determining What Data to Collect and Analyze",
              "toc_id": 323,
              "chunk_count": 6,
              "total_chunks_in_branch": 99,
              "budget_slides_content": 6,
              "direct_slides_content": 0,
              "total_slides_in_branch": 6,
              "time_allocation_minutes": {
                "direct_content_time": 0,
                "direct_interactive_time": 5,
                "total_branch_time": 20
              },
              "children": [
                {
                  "title": "Approaching Digital Forensics Cases",
                  "toc_id": 324,
                  "chunk_count": 30,
                  "total_chunks_in_branch": 35,
                  "budget_slides_content": 2,
                  "direct_slides_content": 2,
                  "total_slides_in_branch": 2,
                  "time_allocation_minutes": {
                    "direct_content_time": 6,
                    "direct_interactive_time": 0,
                    "total_branch_time": 6
                  },
                  "children": [
                    {
                      "title": "Refining and Modifying the Investigation Plan",
                      "toc_id": 325,
                      "chunk_count": 5,
                      "total_chunks_in_branch": 5,
                      "budget_slides_content": 0,
                      "direct_slides_content": 0,
                      "total_slides_in_branch": 0,
                      "time_allocation_minutes": {
                        "direct_content_time": 0,
                        "direct_interactive_time": 0,
                        "total_branch_time": 0
                      },
                      "children": [],
                      "seq_id": 4,
                      "chunks_sorted": [
                        4543,
                        4544,
                        4545,
                        4546,
                        4547
                      ],
                      "content": "Refining and Modifying the Investigation Plan\n\nIn civil and criminal cases, the scope is often defined by search warrants or subpoenas, which specify what data you can recover. However, private-sector cases, such as employee abuse investigations, might not specify limitations in recovering data. For these cases, it’s important to refine the investigation plan as much as possible by trying to determine what the case requires. Generally, you want the investigation to be broad enough to encompass all relevant evidence yet not so wide-ranging that you waste time and resources analyzing data that’s not going to help your case.\n\nOf course, even if your initial plan is sound, at times you’ll find you need to deviate from it and follow where the evidence leads you. Even in these cases, having a plan you revise deliberately along the way is much better than searching for evidence haphazardly.\n\nSuppose, for example, an employee is accused of operating an online business using company resources during work hours. You use this timeframe to narrow the set of data you’re searching, and because you’re looking for unauthorized Internet use, you focus the search on temporary Internet files, Internet history, and e-mail communication. Knowing the types of data you’re looking for at the outset helps you make the best use of your time and prevents you from casting too wide a net. However, in the course of reviewing e-mails related to the case, you might find references to spreadsheets or Word documents containing financial information related to the online business. In this case, it makes sense to broaden the range of data you’re looking for to include these types of files. Again, the key\n\nto broaden the range of data you’re looking for to include these types of files. Again, the key is to start with a plan but remain flexible in the face of new evidence."
                    }
                  ],
                  "seq_id": 3,
                  "chunks_sorted": [
                    4513,
                    4514,
                    4515,
                    4516,
                    4517,
                    4518,
                    4519,
                    4520,
                    4521,
                    4522,
                    4523,
                    4524,
                    4525,
                    4526,
                    4527,
                    4528,
                    4529,
                    4530,
                    4531,
                    4532,
                    4533,
                    4534,
                    4535,
                    4536,
                    4537,
                    4538,
                    4539,
                    4540,
                    4541,
                    4542
                  ],
                  "content": "Approaching Digital Forensics Cases\n\nRecall from Chapter 1 that you begin a digital forensics case by creating an investigation plan that defines the investigation’s goal and scope, the materials needed, and the tasks to perform. Although some basic principles apply to almost all digital forensics cases, the approach you take depends largely on the type of case you’re investigating.\n\nFor example, gathering evidence for an e-mail harassment case might involve little more than accessing network logs and e-mail server backups to locate specific messages. Your approach, however, depends on whether the case is an internal organizational investigation or a civil or criminal investigation carried out by law enforcement. In an internal investigation, evidence collection tends to be fairly easy and straightforward because private-sector investigators usually have ready access to the necessary records and files. In contrast, when investigating a criminal cyberstalking case, you need to contact the ISP and e-mail service. Some companies have systems set up to handle these situations, but others do not. Most organizations don’t keep e-mail for longer than 90 days, and many keep it\n\nbut others do not. Most organizations don’t keep e-mail for longer than 90 days, and many keep it for far less time.\n\nAn investigation of an employee suspected of industrial espionage can require the most work. Before initiating this type of investigation, make sure the organization, whether it’s a private company or a public agency, has set up rules of use and limitations of privacy rights, as described in Chapter 1. For these investigations, you might need to set up a surveillance camera to monitor the employee’s activities in the office. You might also need to plant a software or hardware keylogger (for capturing keystrokes remotely), and you need to engage the network administrator’s services to monitor Internet and network activities. In this situation, you might want to do a remote acquisition of the employee’s drive, and then use another tool to determine what peripheral devices have been accessed.\n\nAs a standard practice, you should follow these basic steps for all digital forensics investigations:\n\nNote\n\nFor more information on basic processes and recommendations, refer to Chapter 2 for guidelines on setting up a forensic workstation.\n\n1.\n\nFor target drives, IACIS recommends using recently wiped media that have been reformatted and inspected for viruses. At the very least, media should be inspected and cleared of any possible malware before using them on a case. With advanced digital forensics tools that can access network storage media, apply standard network security practices, such as access restrictions (through an access control list), securely configured routers, and a firewall. With disk-to-disk forensic copying, the original drive reformats the target drive to the same configuration. If you need to wipe media, you can use several different tools, such as X-Ways Security, Digital Intelligence PDWipe, or WhiteCanyon SecureClean, to clean all data from the target media.\n\nNote\n\nSome commercial tools can wipe only up to 2 TB. An alternative wiping method that has no limits is the Linux dd command’s zero option. If your forensic workstation is a Windows system, boot a Linux Live CD as described in Chapter 7. Open a terminal window, identify the drive you want to wipe clean, enter the command sudo dd if=/dev/zero of=/dev/sdb, and press Enter. Use caution when selecting the of device drive; make sure you’re wiping the correct drive.\n\n2.\n\nInventory the hardware on the suspect’s computer, and note the condition of the computer when seized. Document all physical hardware components as part of your evidence acquisition process.\n\n3.\n\nFor static acquisitions, remove the original drive from the computer, if practical, and then check the date and time values in the system’s CMOS.\n\n4.\n\nRecord how you acquired data from the suspect drive—note, for example, that you created a bit-stream image and which tool you used. The tool you use should also create an MD5 or SHA-1 hash for validating the image.\n\n5.\n\nWhen examining the image of the drive’s contents, process the data methodically and logically.\n\n6.\n\nList all folders and files on the image or drive. For example, Autopsy and other forensics tools can generate lists of all files and folders on a suspect’s drive in Excel, HTML, and other data file formats. Note where specific evidence is found, and indicate how it’s related to the investigation.\n\n7.\n\nIf possible, examine the contents of all data files in all folders, starting at the root directory of the volume partition. The exception is for cases with the defined scope of work stated in a search warrant or discovery demand. For these cases, you look for only the specific items listed in the warrant or discovery demand.\n\n8.\n\nFor all password-protected files that might be related to the investigation, make your best effort to recover file contents. You can use password-recovery tools for this purpose, such as OSForensics Password Recovery and Decryption, AccessData Password Recovery Toolkit (PRTK), or Passware Kit Enterprise.\n\n9.\n\nIdentify the function of every executable (binary or .exe) file that doesn’t match known hash values. Make note of any system files or folders, such as the System32 folder or its content, that are out of place. If you can’t find information on an executable file by using a disk editor, examine the file to see what it does and how it works.\n\n10.\n\nMaintain control of all evidence and findings, and document everything as you progress through your examination."
                },
                {
                  "title": "Using Autopsy to Validate Data",
                  "toc_id": 326,
                  "chunk_count": 8,
                  "total_chunks_in_branch": 23,
                  "budget_slides_content": 1,
                  "direct_slides_content": 1,
                  "total_slides_in_branch": 1,
                  "time_allocation_minutes": {
                    "direct_content_time": 3,
                    "direct_interactive_time": 0,
                    "total_branch_time": 3
                  },
                  "children": [
                    {
                      "title": "Installing NSRL Hashes in Autopsy",
                      "toc_id": 327,
                      "chunk_count": 15,
                      "total_chunks_in_branch": 15,
                      "budget_slides_content": 0,
                      "direct_slides_content": 0,
                      "total_slides_in_branch": 0,
                      "time_allocation_minutes": {
                        "direct_content_time": 0,
                        "direct_interactive_time": 0,
                        "total_branch_time": 0
                      },
                      "children": [],
                      "seq_id": 6,
                      "chunks_sorted": [
                        4556,
                        4557,
                        4558,
                        4559,
                        4560,
                        4561,
                        4562,
                        4563,
                        4564,
                        4565,
                        4566,
                        4567,
                        4568,
                        4569,
                        4570
                      ],
                      "content": "Installing NSRL Hashes in Autopsy\n\nTo install the indexed NSRL hashes in Autopsy, you need to download the latest version. Follow these steps:\n\nNote\n\nBefore beginning this activity, create a C:\\Work\\Chap09\\Chapter folder (referred to as your “work folder” in steps). Download to this work folder any files in this chapter’s downloads section on the student companion site for this book.\n\n1.\n\nStart a Web browser, go to https://sourceforge.net/projects/autopsy/files/NSRL/, and download the zip file containing the latest version of NSRL hashes. Unzip this file to your work folder, where you can access it from Autopsy.\n\n2.\n\nStart Autopsy for Windows. In the Welcome window, click Close, and then click Tools, Options from the menu. In the Options window, click the Hash Databases icon to open the window shown in Figure 9-1.\n\n3.\n\nClick the Import database button. In the Import Hash Database dialog box (see Figure 9-2), click Open, navigate to your work folder, click the NSRL file, and then click Open. Click OK.\n\nNote\n\nEach edition of the NSRL hash database contains a version number in its filename; in Figure 9-2, for example, the version number is 256. When installing this database, use the one with the highest version number in its filename.\n\n4.\n\nIn the Options window, click OK to finish the installation. Exit your Web browser, and leave Autopsy running for the next activity.\n\nLater in this chapter, you learn how to use hash databases to find data on a suspect’s disk or in an image file."
                    }
                  ],
                  "seq_id": 5,
                  "chunks_sorted": [
                    4548,
                    4549,
                    4550,
                    4551,
                    4552,
                    4553,
                    4554,
                    4555
                  ],
                  "content": "Using Autopsy to Validate Data\n\nIn previous chapters, you have used Autopsy for Windows, which can perform forensics analysis on the following file systems:\n\nMicrosoft FAT, NTFS, ExFAT, UFS1, and UFS2\n\nISO 9660 and YAFFS2\n\nMac HFS+ and HFSX\n\nLinux Ext2fs, Ext3fs, and Ext4fs\n\nIn addition, it can analyze data from several sources, including image files from other vendors. Autopsy can handle many formats, including raw, Expert Witness, and virtual machine image files (.vdi and .vhd).\n\nTo enhance searching for and eliminating known OS and application files, Autopsy has an indexed version of the NIST National Software Reference Library (NSRL) of MD5 hashes, and you can import NSRL reference hashes into Autopsy. For more information on the NSRL, see Chapter 6 or visit www.nsrl.nist.gov."
                },
                {
                  "title": "Collecting Hash Values in Autopsy",
                  "toc_id": 328,
                  "chunk_count": 35,
                  "total_chunks_in_branch": 35,
                  "budget_slides_content": 2,
                  "direct_slides_content": 2,
                  "total_slides_in_branch": 2,
                  "time_allocation_minutes": {
                    "direct_content_time": 6,
                    "direct_interactive_time": 0,
                    "total_branch_time": 6
                  },
                  "children": [],
                  "seq_id": 7,
                  "chunks_sorted": [
                    4571,
                    4572,
                    4573,
                    4574,
                    4575,
                    4576,
                    4577,
                    4578,
                    4579,
                    4580,
                    4581,
                    4582,
                    4583,
                    4584,
                    4585,
                    4586,
                    4587,
                    4588,
                    4589,
                    4590,
                    4591,
                    4592,
                    4593,
                    4594,
                    4595,
                    4596,
                    4597,
                    4598,
                    4599,
                    4600,
                    4601,
                    4602,
                    4603,
                    4604,
                    4605
                  ],
                  "content": "Collecting Hash Values in Autopsy\n\nIn the following activity, you learn how to get the MD5 hash value of files in Autopsy. You’re looking for files named “Special Project-A” with a .jpg or .bmp extension. After you find these files, you collect their MD5 hash values in a spreadsheet. In the next activity, you create a hash database of known files of interest. To find files’ hash values, follow these steps:\n\n1.\n\nIn File Explorer, double-click the Ch09Inchp01.exe file you downloaded to your work folder to uncompress the image file InChap09.dd, and then start Autopsy for Windows, if necessary.\n\n2.\n\nIn the Welcome window, click the Create New Case button. In the New Case Information window, type InChap09 for the case name. Click the Browse button next to the Base Directory text box, navigate to and click your work folder, click OK, and then click Next.\n\n3.\n\nIn the Additional Information window, type InChap09 in the Case Number text box and your name in the Examiner text box. Click Finish.\n\n4.\n\nIn the Add Data Source window, click Disk Image or VM file in the Select Type of Data Source to Add section, and then click Next. In the Select Data Source window, click the Browse button, navigate to your work folder, click InChap09.dd , and then click Open. Then click Next.\n\n5.\n\nIn the Configure Ingest Modules window, click the Hash Lookup check box. In the “Select known hash databases to use” section, click the check box for the NSRL file you installed. On the left, click the File Type Identification, Keyword Search, and PhotoRec Carver check boxes, and then click to clear all other check boxes. At the lower left, click the Process Unallocated Space check box, as shown in Figure 9-3, and then click Next and Finish.\n\n6.\n\nWhen the ingest process is finished, in the Tree Viewer pane on the left, click to expand Views, File Types, By Extension, and Images (see Figure 9-4).\n\n7.\n\nRight-click the Special Project-A (1).bmp file, point to Tag File, and click Tag and Comment. In the Create Tag dialog box, click the New Tag Name button. In the New Tag section, type Special Project-A in the Tag Name text box, click OK, and then click OK again.\n\n8.\n\nIn the Result Viewer pane, Ctrl+click Special Project-A (1).JPG, Special Project-A (2).bmp , and Special Project-A (2).JPG . Right-click this selection, point to Tag File and then Quick Tag, and then click Special Project-A (see Figure 9-5).\n\n9.\n\nClick Generate Report, and in the Generate Report window, click the Results - Excel option button in the Report Modules section, and then click Next. In the Configure Artifact Reports window, click the Tagged Results option button, click the Special Project-A check box (see Figure 9-6), and then click Finish.\n\n10.\n\nIn the Report Generation Progress window, click the Results - Excel pathname to examine the Excel report.\n\n11.\n\nIn the Excel report, examine the contents of the Tagged Files sheet. Scroll to column I, labeled Hash (see Figure 9-7), and then save the Excel file as InChap09-Report in your work folder. Leave it open for the next activity.\n\nThe following activity shows you how to add the hash values you found to a new hash database that can be used in future forensics analysis on other drives. Follow these steps to create this database:\n\n1.\n\nIf you closed the Excel file created in the previous activity, open it and navigate to column I in the Tagged Files sheet. Copy the four MD5 hash values in rows 2 through 5, shown in Figure 9-8.\n\n2.\n\nIn Autopsy, click Tools, Options from the menu, and in the Options window, click the Hash Databases icon.\n\n3.\n\nClick the New database button to open the Create Hash Database dialog box. In the Hash Set Name text box, type Special Project-A, and then click Save As. In the Save dialog box, click Save. In the Create Hash Database dialog box, click the Known Bad option button (see Figure 9-9), and then click OK.\n\n4.\n\nIn the Hash Databases list box, click to select Special Project-A, and under the Information section, click the Add Hashes to Database button. In the “Paste MD5 hash value(s) (one per line) below” section, click Paste From Clipboard. Click Add Hashes to Database, and click OK twice.\n\n5.\n\nExit Autopsy and Excel."
                }
              ],
              "interactive_activity": {
                "title": "Determining What Data to Collect and Analyze (Interactive Activity)",
                "toc_id": 323,
                "slides_allocated": 1,
                "seq_id": 8
              },
              "seq_id": 2,
              "chunks_sorted": [
                4507,
                4508,
                4509,
                4510,
                4511,
                4512
              ],
              "content": "Determining What Data to Collect and Analyze\n\nExamining and analyzing digital evidence depend on the nature of the investigation and the amount of data to process. Criminal investigations are limited to finding data defined in the search warrant, and civil investigations are often limited by court orders for discovery. Private-sector investigators might be searching for company policy violations that require examining only specific items, such as e-mail. Therefore, investigations often involve locating and recovering a few specific items, which simplifies and speeds processing.\n\nIn a private-sector environment, however, especially if litigation is involved or anticipated, the company attorney often directs the investigator to recover as much information as possible. Satisfying this demand becomes a major undertaking with many hours of tedious work. These types of investigations can also result in scope creep The result of an investigation expanding beyond its original description because the discovery of unexpected evidence increases the amount of work required. , in which an investigation expands beyond the original description because of unexpected evidence you find, prompting the attorney to ask you to examine other areas to recover more evidence. Scope creep increases the time and resources needed to extract, analyze, and present evidence. Be sure to document\n\nthe time and resources needed to extract, analyze, and present evidence. Be sure to document any requests for additional investigation, in case you must explain why the investigation took longer than planned, why the scope widened during the course of the investigation, and so forth.\n\nOne reason scope creep has become more common is that criminal investigations increasingly require more detailed examination of evidence just before trial to help prosecutors fend off attacks from defense attorneys. Because defense attorneys typically have the right of full discovery of digital evidence used against their clients, it’s possible for new evidence to come to light while complying with the defense request for full discovery. However, this new evidence often isn’t revealed to the prosecution; instead, the defense uses it to defend the accused. For this reason, it’s become more important for prosecution teams to ensure that they have analyzed the evidence exhaustively before trial. (Note that the defense request for full discovery applies only to criminal cases in the United\n\n(Note that the defense request for full discovery applies only to criminal cases in the United States; civil cases are handled differently.)"
            },
            {
              "title": "Validating Forensic Data",
              "toc_id": 329,
              "chunk_count": 3,
              "total_chunks_in_branch": 51,
              "budget_slides_content": 3,
              "direct_slides_content": 0,
              "total_slides_in_branch": 4,
              "time_allocation_minutes": {
                "direct_content_time": 0,
                "direct_interactive_time": 5,
                "total_branch_time": 14
              },
              "children": [
                {
                  "title": "Validating with Hexadecimal Editors",
                  "toc_id": 330,
                  "chunk_count": 28,
                  "total_chunks_in_branch": 31,
                  "budget_slides_content": 2,
                  "direct_slides_content": 2,
                  "total_slides_in_branch": 2,
                  "time_allocation_minutes": {
                    "direct_content_time": 6,
                    "direct_interactive_time": 0,
                    "total_branch_time": 6
                  },
                  "children": [
                    {
                      "title": "Using Hash Values to Discriminate Data",
                      "toc_id": 331,
                      "chunk_count": 3,
                      "total_chunks_in_branch": 3,
                      "budget_slides_content": 0,
                      "direct_slides_content": 0,
                      "total_slides_in_branch": 0,
                      "time_allocation_minutes": {
                        "direct_content_time": 0,
                        "direct_interactive_time": 0,
                        "total_branch_time": 0
                      },
                      "children": [],
                      "seq_id": 11,
                      "chunks_sorted": [
                        4637,
                        4638,
                        4639
                      ],
                      "content": "Using Hash Values to Discriminate Data\n\nIn Chapter 6, you learned about using the discrimination function to sort known good files from suspicious files. This function is useful in limiting the amount of data you have to examine, and many current digital forensics tools offer it. AccessData has its own hashing database, Known File Filter (KFF) An AccessData database containing the hash values of known legitimate and suspicious files. It’s used to identify files that are possible evidence or eliminate files from an investigation if they’re legitimate. , which is available only with FTK. KFF filters known program files, such as winword.exe, from view and contains the hash values of known illegal files, such as child pornography. It then compares known file hash values with files on your evidence drive or image files to see whether\n\ncompares known file hash values with files on your evidence drive or image files to see whether they contain suspicious data. Periodically, AccessData updates these known hash values and posts an updated KFF. As mentioned in Chapter 6, the NIST National Software Reference Library (NSRL; www.nsrl.nist.gov/index.html) maintains a national database of updated file hash values for a variety of OSs, applications, and images; however, it doesn’t list hash values of known illegal files. Other digital forensics tools, such as X-Ways Forensics, OSForensics, and Forensic Explorer, can import the NSRL database and run hash comparisons."
                    }
                  ],
                  "seq_id": 10,
                  "chunks_sorted": [
                    4609,
                    4610,
                    4611,
                    4612,
                    4613,
                    4614,
                    4615,
                    4616,
                    4617,
                    4618,
                    4619,
                    4620,
                    4621,
                    4622,
                    4623,
                    4624,
                    4625,
                    4626,
                    4627,
                    4628,
                    4629,
                    4630,
                    4631,
                    4632,
                    4633,
                    4634,
                    4635,
                    4636
                  ],
                  "content": "Validating with Hexadecimal Editors\n\nAdvanced hexadecimal editors have many features not available in digital forensics tools, such as hashing specific files or sectors. Learning how to use these tools is important, especially when you need to find a particular file—for example, a known contraband image. With the hash value in hand, you can use a forensics tool to search for a suspicious file that might have had its name changed to look like an innocuous file. (Recall that two files with exactly the same content have the same hash value, even if they have different names.) Getting hash values with a full-featured hexadecimal editor can be faster and easier than with a digital forensics tool.\n\nWinHex provides several hashing algorithms, such as MD5 and SHA-1. Sometimes you need the hash value of specific files or sectors to validate whether data or fragments (sectors) match the contents of a known file, or you need to verify data immediately after a sparse acquisition, for example. To use the hashing functions of WinHex, follow these steps:\n\n1.\n\nStart Word, and in a new document, type a sentence or two, and save the file as test_hex.docx in your work folder. When you’re finished, exit Word.\n\n2.\n\nStart WinHex, using the Run as administrator option. (If necessary, when the UAC message box opens, click Yes.) Click File, Open from the main menu. In the Open dialog box, navigate to your work folder, click test_hex.docx , and click Open. Figure 9-10 shows the file open in WinHex.\n\n3.\n\nTo compute an MD5 hash of this file, click Tools, Compute Hash from the menu to open the Compute hash dialog box (see Figure 9-11). Click the list arrow, click MD5 (128 bit), if necessary, and then click OK.\n\n4.\n\nIn the MD5 (128 bit) dialog box, right-click the hash value (see Figure 9-12) and click Copy. Start Notepad, and paste the hash value into a new text document. Save the file as test_hex_hashvalue.txt in your work folder, exit Notepad, and then click Close in the MD5 (128 bit) dialog box. Leave WinHex running for the next activity.\n\nAnother feature of WinHex generates the hash value of selected data in a file or any sector on a disk. To see how this feature works, follow these steps:\n\n1.\n\nIn WinHex, open the Jeffersonian quotes.doc file from your work folder.\n\n2.\n\nPlace the mouse pointer at the beginning of the byte address 00000000 ; the pointer should be positioned on the hexadecimal D0 because you’re examining the first sector of the file.\n\n3.\n\nDrag to select a complete sector (512 bytes or x200 bytes). To know when you’ve selected the sector, watch the Offset counter at the bottom in the status bar. It should display “Offset: 1FF” when you’ve highlighted the entire sector, as shown in Figure 9-13.\n\nTip\n\nAs you drag the mouse, note that the offset counter increments or decrements according to the direction of the mouse’s movement across the window. This counter defaults to hexadecimal but can be altered to decimal counting. To toggle the offset counter between hexadecimal and decimal, click anywhere in the Offset section of the status bar at the bottom.\n\n4.\n\nClick Tools, Compute Hash from the menu to open the Compute hash dialog box. Click the list arrow, click MD5 (128 bit), if necessary, and then click OK.\n\n5.\n\nRight-click the hash value in the MD5 (128 bit) dialog box and click Copy. Start Notepad, and paste the hash value into a new text document. Save the file as Quotes_hashvalue.txt in your work folder, exit Notepad, and then click Close in the MD5 (128 bit) dialog box.\n\n6.\n\nExit Notepad and WinHex.\n\nThe advantage of recording hash values is that you can determine whether data has changed. As shown in the preceding steps, you can use this method for specific sectors or entire files. One advantage of using hashes of sectors is that you can look for known file fragments, a process called block-wise hashing The process of hashing all sectors of a file and then comparing them with sectors on a suspect’s drive to determine whether there are any remnants of the original file that couldn’t be recovered. . This process builds a data set of hashes of sectors from the original file, and then examines sectors on the suspect’s drive to see whether any other sectors match. If an identical hash value is found, you have confirmed that the file was stored on the suspect’s drive. For example, say you\n\nis found, you have confirmed that the file was stored on the suspect’s drive. For example, say you have a known Word document from a victim, and it was stored and then deleted on a suspect’s computer. The attempted recovery of deleted files reveals no trace of the original file, but you can search for fragments of deleted files by using block-wise hashing. X-Ways Forensics and many other forensics tools offer this feature. For more information on how it detects data remnants, see www.x-ways.net/winhex/manual.pdf; for an example of how X-Ways Forensics performs this function, see www.xwaysclips.co.uk/2015/05/video-46-block-hashing-explained.html."
                },
                {
                  "title": "Validating with Digital Forensics Tools",
                  "toc_id": 332,
                  "chunk_count": 17,
                  "total_chunks_in_branch": 17,
                  "budget_slides_content": 1,
                  "direct_slides_content": 1,
                  "total_slides_in_branch": 1,
                  "time_allocation_minutes": {
                    "direct_content_time": 3,
                    "direct_interactive_time": 0,
                    "total_branch_time": 3
                  },
                  "children": [],
                  "seq_id": 12,
                  "chunks_sorted": [
                    4640,
                    4641,
                    4642,
                    4643,
                    4644,
                    4645,
                    4646,
                    4647,
                    4648,
                    4649,
                    4650,
                    4651,
                    4652,
                    4653,
                    4654,
                    4655,
                    4656
                  ],
                  "content": "Validating with Digital Forensics Tools\n\nAs mentioned, commercial digital forensics tools have built-in validation features for image acquisitions. These tools generate MD5 and SHA-1 hash values for the data in image files.\n\nFor example, in AccessData FTK Imager, when you select the Expert Witness (.E01) or SMART (.S01) format, additional options are available for hashing all the data. FTK Imager then inserts a report into the .E01 or .S01 file that lists MD5 and SHA-1 hash values. Autopsy has a similar feature called E01 Verifier for verifying an Expert Witness image file.\n\nWhen this image file is loaded in a forensics tool, another MD5 or SHA-1 hash is run on the copied data and then compared with the original hash value to verify whether the image file is correct. If the hashes don’t match, the forensic tool produces an error message that the digital evidence has been corrupted. In this case, the digital forensics examiner needs to create a new forensic image of the original data. If the original drive is unavailable or if the image is from a RAM disk or a system memory dump, the examiner should list the mismatched hash values in a report, which should state that the findings might not be accurate because the hash values don’t match.\n\nBecause raw data acquisitions, such as dd images, can’t store the original image hash, many tools generate a separate text file containing additional information about an acquisition, including its hash value. In the following activity, you learn how to use WinHex to hash an image file and then compare it with the original hash value FTK Imager calculated. You use two files you extract from the Ch09Inchp01.exe file you downloaded before starting this chapter’s activities. Follow these steps to verify the integrity of the InChap09.dd image:\n\n1.\n\nIn File Explorer, navigate to your work folder and double-click the InChap09.exe file to extract its contents. Then double-click the InChap09.dd.txt file to open it in Notepad, as shown in Figure 9-14.\n\n2.\n\nStart WinHex, and click File, Open from the menu. Navigate to your work folder. Click the InChap09.dd file, and click Open. In the WinHex warning message box, click OK.\n\n3.\n\nClick Tools, Compute Hash from the menu. In the Compute hash dialog box, click the list arrow, click MD5 (128), if necessary, and then click OK.\n\n4.\n\nRight-click the hash value in the MD5 (128) dialog box and click Copy. In the InChap09.dd.txt file you opened in Step 1, find the original MD5 hash value. Under it, type Verified MD5: and paste the MD5 hash value, as shown in Figure 9-15.\n\n5.\n\nIn Notepad, save InChap09.dd.txt as InChap09.dd-verified.txt in your work folder, and exit Notepad.\n\n6.\n\nIn WinHex, click Close in the MD5 (128) dialog box, and exit WinHex."
                }
              ],
              "interactive_activity": {
                "title": "Validating Forensic Data (Interactive Activity)",
                "toc_id": 329,
                "slides_allocated": 1,
                "seq_id": 13
              },
              "seq_id": 9,
              "chunks_sorted": [
                4606,
                4607,
                4608
              ],
              "content": "Validating Forensic Data\n\nOne of the most critical aspects of digital forensics is validating digital evidence because ensuring the integrity of data you collect is essential for presenting evidence in court. Chapter 4 introduced forensic hashing algorithms, and in this section, you learn more about validating an acquired image before you analyze it.\n\nMost forensics tools offer a feature for hashing image files. Digital forensics tools have some limitations in performing hashing, however, so using advanced hexadecimal editors is necessary to ensure data integrity."
            },
            {
              "title": "Addressing Data-Hiding Techniques",
              "toc_id": 333,
              "chunk_count": 2,
              "total_chunks_in_branch": 82,
              "budget_slides_content": 5,
              "direct_slides_content": 0,
              "total_slides_in_branch": 5,
              "time_allocation_minutes": {
                "direct_content_time": 0,
                "direct_interactive_time": 5,
                "total_branch_time": 17
              },
              "children": [
                {
                  "title": "Hiding Files by Using the OS",
                  "toc_id": 334,
                  "chunk_count": 3,
                  "total_chunks_in_branch": 3,
                  "budget_slides_content": 0,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 0,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 0
                  },
                  "children": [],
                  "seq_id": 15,
                  "chunks_sorted": [
                    4659,
                    4660,
                    4661
                  ],
                  "content": "Hiding Files by Using the OS\n\nOne of the first techniques used to hide data was changing file extensions, as you learned in Chapter 8. For example, a suspect wanting to hide an Excel spreadsheet containing incriminating evidence could change its extension from .xlsx to .jpg. An investigator who tries to open the file in Excel will get an error message stating that the file can’t be opened. Advanced digital forensics tools, however, check file headers and compare the file extension to verify that it’s correct. If there’s a discrepancy, the tool flags the file as a possible altered file that requires more analysis.\n\nAnother hiding technique is selecting the Hidden attribute in a file’s Properties dialog box, so an investigator who’s trying to view files in File Explorer should select the option to view hidden files, folders, and drives. Digital forensics tools can identify hidden files for investigators, however."
                },
                {
                  "title": "Hiding Partitions",
                  "toc_id": 335,
                  "chunk_count": 8,
                  "total_chunks_in_branch": 8,
                  "budget_slides_content": 0,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 0,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 0
                  },
                  "children": [],
                  "seq_id": 16,
                  "chunks_sorted": [
                    4662,
                    4663,
                    4664,
                    4665,
                    4666,
                    4667,
                    4668,
                    4669
                  ],
                  "content": "Hiding Partitions\n\nOne way to hide partitions is with the Windows disk partition utility, diskpart. By using the diskpart remove letter command at the PowerShell prompt, you can unassign the partition’s letter, which hides it from view in File Explorer. To unhide the partition, use the diskpart assign letter command. Other disk management tools, such as IM-Magic, EaseUS Partition Master, and Linux Grand Unified Bootloader (GRUB), are available, too. For more information on the diskpart command, see www.disk-partition.com/diskpart/assign-drive-letter-4125.html\n\nTip\n\nTo learn more about hiding and unhiding partitions, see www.isumsoft.com/windows-10/hide-or-unhide-hard-disk-partition-in-windows-10.html or https://datarecovery.wondershare.com/hide-partition-in-windows-10.html.\n\nTo detect whether this technique has been used, be sure to account for all disk space when you’re examining an evidence drive. Analyze any disk areas containing space you can’t account for so that you can determine whether they contain additional evidence. For example, in Figure 9-16, the Windows Disk Management tool shows two partitions for Disk 2, labeled H and I, with a 200 MB gap between them. For demonstration purposes, this gap has been labeled “PART HIDDEN” and has no assigned letter. Most digital forensics tools or hexadecimal editors can access these gaps. Gaps between partitions are typically 128 bytes in Windows Vista and later. In this example, the 200 MB gap between partitions H and I indicates you should examine this larger-than-normal gap to see whether it contains any\n\nH and I indicates you should examine this larger-than-normal gap to see whether it contains any relevant evidence.\n\nMany digital forensics tools can detect and view a hidden partition. Both WinHex and Autopsy, for example, can show partitions and hidden partitions on a disk volume. In WinHex, you can also view all connected disks. Notice that partition 2 in Figure 9-17 has no drive letter associated with it. The lack of a drive letter means it’s a hidden partition. In addition, WinHex displays the boot partition as “Start sectors” and the unallocated area as “Unpartitionable space.”\n\nFigure 9-18 shows how Autopsy displays a forensic image of the same drive shown in Figure 9-17. Under Data Sources, Autopsy displays all partitions as volumes, including the boot partition and the unallocated volume. The hidden partition in WinHex, Partition 2, is displayed in Autopsy as vol3 (Win95 FAT16 (0x0e): 1228928-1638527). In Autopsy, hidden partitions are visible only when viewing a forensic disk image, not when viewing in live mode."
                },
                {
                  "title": "Marking Bad Clusters",
                  "toc_id": 336,
                  "chunk_count": 6,
                  "total_chunks_in_branch": 6,
                  "budget_slides_content": 0,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 0,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 0
                  },
                  "children": [],
                  "seq_id": 17,
                  "chunks_sorted": [
                    4670,
                    4671,
                    4672,
                    4673,
                    4674,
                    4675
                  ],
                  "content": "Marking Bad Clusters\n\nAnother data-hiding technique used in FAT file systems is placing sensitive or incriminating data in free or slack space on disk partition clusters. This technique, although not common now, involves using older utilities, such as Norton DiskEdit, developed by Symantec as part of its Norton Utilities suite. In Norton DiskEdit, you can mark good clusters as bad clusters in the FAT table. The OS then considers these clusters unusable. The only way they can be accessed from the OS is by changing them to good clusters with a disk editor.\n\nTo mark a good cluster as bad in Norton DiskEdit, you type the letter B in the FAT entry corresponding to that cluster when examining the FAT table. You can then use any DOS disk editor to write and read data to this cluster, which is effectively hidden because it appears as bad to the OS.\n\nDiskEdit was last available in version 8.0 of Norton Utilities. It runs only in MS-DOS and can access only FAT-formatted disk media. You can’t run it by using Windows command prompts. You can find Symantec Norton Utilities at Win World PC (https://winworldpc.com/product/norton-utilities/80). This download site provides one file in 7z compressed format. See the READ.ME text file for instructions on how to run this utility. For additional Norton DOS utilities, see http://vetusware.com/download/Norton%20Utilities%208.0/?id=3515.\n\nNote\n\nIf a FAT partition containing clusters marked as bad is converted to an NTFS partition, the bad clusters remain marked as bad, so the conversion to NTFS doesn’t affect the content of these clusters. Most GUI tools skip clusters marked as bad in FAT and NTFS, and these clusters might contain valuable evidence for your investigation."
                },
                {
                  "title": "Bit-Shifting",
                  "toc_id": 337,
                  "chunk_count": 34,
                  "total_chunks_in_branch": 34,
                  "budget_slides_content": 2,
                  "direct_slides_content": 2,
                  "total_slides_in_branch": 2,
                  "time_allocation_minutes": {
                    "direct_content_time": 6,
                    "direct_interactive_time": 0,
                    "total_branch_time": 6
                  },
                  "children": [],
                  "seq_id": 18,
                  "chunks_sorted": [
                    4676,
                    4677,
                    4678,
                    4679,
                    4680,
                    4681,
                    4682,
                    4683,
                    4684,
                    4685,
                    4686,
                    4687,
                    4688,
                    4689,
                    4690,
                    4691,
                    4692,
                    4693,
                    4694,
                    4695,
                    4696,
                    4697,
                    4698,
                    4699,
                    4700,
                    4701,
                    4702,
                    4703,
                    4704,
                    4705,
                    4706,
                    4707,
                    4708,
                    4709
                  ],
                  "content": "Bit-Shifting\n\nSome home computer users developed programming skills in computer manufacturers’ assembly languages and learned how to create a low-level encryption program that changes the order of binary data, making the altered data unreadable when accessed with a text editor or word processor. These programs rearrange bits for each byte in a file. To secure a file containing sensitive or incriminating information, these users run an assembler program (also called a “macro”) on the file to scramble the bits. To access the file, they run another program that restores the scrambled bits to their original order. Some of these programs are still used today and can make it difficult for investigators to analyze data on a suspect drive. You should start by identifying any files you’re not familiar with that\n\ndata on a suspect drive. You should start by identifying any files you’re not familiar with that might lead to new evidence. Training in assembly language—as well as higher-level programming languages, such as Visual Basic, Visual C++, or Perl—is also helpful.\n\nA related, and well-known, technique for hiding data is shifting bit patterns to alter the byte values of data. Bit-shifting The process of shifting one or more digits in a binary number to the left or right to produce a different value. changes data from readable code to data that looks like binary executable code. WinHex and Hex Workshop include a feature for shifting bits and altering byte patterns of entire files or specified data. To shift bits in a text file, follow these steps:\n\n1.\n\nStart Notepad, and in a text document, type TEST FILE. Test file is to see how shifting bits will alter the data in a file.\n\n2.\n\nSave the file as Bit_shift.txt in your work folder, and exit Notepad.\n\n3.\n\nStart WinHex, using the Run as administrator option. (If necessary, when the UAC message box opens, click Yes.) Click File, Open from the menu. Navigate to your work folder, and then double-click Bit_shift.txt . Figure 9-19 shows the file open in WinHex.\n\n4.\n\nTo set up WinHex for bit-shifting, click Options, Edit Mode from the menu. Click Default Edit Mode (=editable), if necessary, and then click OK.\n\n5.\n\nHighlight all the data in the file by clicking Edit, Select All from the menu.\n\n6.\n\nClick Edit, Modify Data from the menu. In the Modify Block Data dialog box, click the Left shift by 1 bit option button (see Figure 9-20), and then click OK.\n\n7.\n\nClick File, Save As from the menu, and save the file as Bit_shift_left.txt in your work folder. As you can see in Figure 9-21, the text has changed to random values. Exit and then restart WinHex.\n\n8.\n\nTo return the file to its original configuration, you need to bit-shift it back to the right. Make sure the data is highlighted, and then click Edit, Modify Data from the menu. In the Modify Block Data dialog box, click Right shift by 1 bit, and then click OK.\n\n9.\n\nSave the file as Bit_shift_right.txt in your work folder, and leave this file open in WinHex for the next activity.\n\nNow you can use WinHex to find the MD5 hash values for these three files and determine whether Bit_shift.txt is different from Bit_shift_right.txt and Bit_shift_left.txt. To check the MD5 values in WinHex, follow these steps:\n\n1.\n\nWith Bit_shift_right.txt open in WinHex, click File, Open to open Bit_shift.txt , and then repeat to open Bit_shift_left.txt .\n\n2.\n\nClick the Bit_shift.txt tab to make it the active file, and highlight the file’s content by clicking Edit, Select All.\n\n3.\n\nClick Tools, Compute Hash from the menu to open the Compute hash dialog box. In the list box, click MD5 (128 bit), if necessary, and then click OK. Copy the MD5 hash value of Bit_shift.txt, and paste it in a new text document in Notepad. Click Close in the MD5 (128 bit) dialog box.\n\n4.\n\nRepeat Steps 2 and 3 for Bit_shift_left.txt and Bit_shift_right.txt , pasting their hash values in the same Notepad text file.\n\n5.\n\nCompare the MD5 hash values to determine whether the files are different. When you’re finished, exit WinHex. In Notepad, save the text file as Bit_shift_recovery.txt in your work folder, and exit Notepad. If your output is correct, the Bit_shift.txt and Bit_shift_right.txt files should have the same MD5 hash values. Exit WinHex and Notepad.\n\nTypically, antivirus tools run hashes on potential malware files, but some advanced malware uses bit-shifting as a way to hide its malicious code from antivirus tools. With the bit-shifting functions in WinHex, however, you can inspect potential malicious code manually. In addition, some malware that attacks Microsoft Office files consists of executable code that’s embedded at the end of document files and hidden with bit-shifting. When an Office document is opened, the malware reverses the bit-shifting on the executable code and then runs it."
                },
                {
                  "title": "Understanding Steganalysis Methods",
                  "toc_id": 338,
                  "chunk_count": 10,
                  "total_chunks_in_branch": 10,
                  "budget_slides_content": 1,
                  "direct_slides_content": 1,
                  "total_slides_in_branch": 1,
                  "time_allocation_minutes": {
                    "direct_content_time": 3,
                    "direct_interactive_time": 0,
                    "total_branch_time": 3
                  },
                  "children": [],
                  "seq_id": 19,
                  "chunks_sorted": [
                    4710,
                    4711,
                    4712,
                    4713,
                    4714,
                    4715,
                    4716,
                    4717,
                    4718,
                    4719
                  ],
                  "content": "Understanding Steganalysis Methods\n\nAs explained in Chapter 8, the term steganography A cryptographic technique for embedding information in another file for the purpose of hiding that information from casual observers. comes from the Greek word for “hidden writing.” It’s defined as hiding messages in such a way that only the intended recipient knows the message is there. The term for detecting and analyzing steganography files is “steganalysis.”\n\nIn addition to steganography, digital watermarking was developed as a way to protect file ownership. Some digital watermarks are designed to be visible—for example, to notify users that an image is copyrighted. The digital watermarks used for steganography aren’t usually visible. For example, when viewing two files that look the same, but one has an invisible digital watermark, they appear to be the same file. Their file sizes might even be identical. However, if you run an MD5 or SHA-1 hash comparison on both files, you’ll find that the hash values aren’t equal. Chapter 8 described a few steganography tools available for lossy graphics files. These tools insert data into the graphics file but often alter the original file in size and clarity.\n\nOne way to hide data is to use steganography tools, many of which are freeware or shareware, to insert information into a variety of files. If you encrypt a plaintext file with PGP and insert the encrypted text into a steganography file, for example, cracking the encrypted message is extremely difficult.\n\nNeil F. Johnson and Sushil Jajodia, authors of the white paper “Steganalysis of Images Created Using Current Steganography Software” (1998, www.jjtc.com/ihws98/jjgmu.html), described these steganalysis methods (“attacks”):\n\nStego-only attack—Used when only the file containing the possible steganography content is available for analysis; it’s similar to a cyphertext attack. This attack is one of the most difficult to perform because all you have to analyze is the suspected steganography file.\n\nKnown cover attack—Used when the cover-media In steganalysis, the original file with no hidden message. See also stego-media. , the original file with no hidden message, and the stego-media In steganalysis, the file containing the hidden message. See also cover-media. , the converted cover-media file that stores the hidden message, are available for analysis. By analyzing the original and steganography files, further comparisons can be made to identify common patterns that might help decipher the message.\n\nKnown message attack—Used when the hidden message is revealed later, allowing further analysis of new messages. Similar to the known cover attack, this method uses comparative analysis to decipher the message. Because the message is known, deciphering it takes less effort.\n\nChosen stego attack—Used when a steganography tool and stego-media were used to hide the message content. Because this method uses a known steganography tool, the analyst applies password or passphrase recovery techniques to decipher the message.\n\nChosen message attack—Used to identify corresponding patterns used in stego-media. This technique creates stego-media and then analyzes them to determine how data is configured in the file. The analyst then uses these known configuration patterns to compare with suspected stego-media to determine what the message might be."
                },
                {
                  "title": "Examining Encrypted Files",
                  "toc_id": 339,
                  "chunk_count": 4,
                  "total_chunks_in_branch": 4,
                  "budget_slides_content": 0,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 0,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 0
                  },
                  "children": [],
                  "seq_id": 20,
                  "chunks_sorted": [
                    4720,
                    4721,
                    4722,
                    4723
                  ],
                  "content": "Examining Encrypted Files\n\nPeople who want to make data unreadable can use advanced encryption programs, such as PGP or BestCrypt. Encrypted files are encoded to prevent unauthorized access. To decode an encrypted file, users supply a password or passphrase. Without the passphrase, recovering the contents of encrypted files is difficult. Many commercial encryption programs use a technology called key escrow A technology designed to recover encrypted data if users forget their passphrases or if the user key is corrupted after a system failure. , which is designed to recover encrypted data if users forget their passphrases or if the user key is corrupted after a system failure. Forensics examiners can also use key escrow to attempt to recover encrypted data. Although some vendors have developed key recovery tools, the\n\nto attempt to recover encrypted data. Although some vendors have developed key recovery tools, the resources needed to crack encryption schemes are usually beyond what’s available to small or medium organizations. If you do encounter encrypted data in an investigation, make an effort to persuade the suspect to reveal the encryption passphrase.\n\nSome encryption schemes are so complex that the time to crack them can be measured in days, weeks, years, and even decades. Key sizes of 128 bits to 4096 bits make the job of breaking them with a brute-force attack nearly impossible with current technology. Quantum computing is progressing to make many current encryption schemes obsolete. Currently, there are some encryption schemes that will remain unbroken with commercially available tools."
                },
                {
                  "title": "Recovering Passwords",
                  "toc_id": 340,
                  "chunk_count": 15,
                  "total_chunks_in_branch": 15,
                  "budget_slides_content": 1,
                  "direct_slides_content": 1,
                  "total_slides_in_branch": 1,
                  "time_allocation_minutes": {
                    "direct_content_time": 3,
                    "direct_interactive_time": 0,
                    "total_branch_time": 3
                  },
                  "children": [],
                  "seq_id": 21,
                  "chunks_sorted": [
                    4724,
                    4725,
                    4726,
                    4727,
                    4728,
                    4729,
                    4730,
                    4731,
                    4732,
                    4733,
                    4734,
                    4735,
                    4736,
                    4737,
                    4738
                  ],
                  "content": "Recovering Passwords\n\nPassword recovery is becoming more common in digital forensics analysis. Several password-cracking tools are available for handling password-protected data or systems. Some of these products are integrated into a digital forensics tool, such as OSForensics. Others, including the following, are stand-alone tools that typically require extracting password files or accessing a suspect’s disk or image file directly:\n\nLast Bit (http://lastbit.com/password-recovery-methods.asp)\n\nAccessData PRTK (http://accessdata.com/product-download at the Decryption Products link)\n\nophcrack (http://ophcrack.sourceforge.net)\n\nJohn the Ripper (www.openwall.com/john)\n\nPassware (www.lostpassword.com/kit-forensic.htm)\n\nThese tools use a dictionary attack or brute-force attack to crack passwords. Brute-force attacks use every possible letter, number, and character found on a keyboard. Eventually, a brute-force attack can crack any password; however, this method can require a lot of time and processing power, especially if the password is very long. In a dictionary attack, the program uses common words found in the dictionary and tries them as passwords. Most password crackers have dictionaries in a variety of languages, including English, French, Russian, and even Swahili. With some password-cracking tools, you can import additional unique words extracted from evidence. In FTK, for example, you can export a word list to PRTK that can be added to the dictionary.\n\nWith many of these programs, you can build profiles of a suspect to help determine his or her password. These programs consider information such as names of relatives or pets, favorite colors, and schools attended. The principle behind these programs is that people have a habit of using things they’re comfortable with, especially if it requires memorizing something secret, such as a password. This method of password cracking is known as a “hybrid attack.”\n\nMany password-protected OSs and applications store passwords in the form of MD5 or SHA hash values. Because of this storage method, a brute-force attack requires converting a dictionary password from plaintext to a hash value. This process requires additional CPU cycle time to process each attempt to match the dictionary password to the OS or application password.\n\nAnother method has been developed that hashes passwords in a dictionary. A rainbow table A file containing the hash values for every possible password that can be generated from a computer’s keyboard. is a file containing the hash values for every possible password that can be generated from a computer’s keyboard. Because rainbow tables already contain these hash values and no conversion is necessary, this method is much faster than a dictionary or brute-force attack. For more information on rainbow tables and where to download them, visit http://project-rainbowcrack.com and http://project-rainbowcrack.com/table.htm. As good as rainbow tables are for cracking passwords, however, a new scheme of protecting passwords has been developed that adds extra bits to a password and then hashes it.\n\nof protecting passwords has been developed that adds extra bits to a password and then hashes it. This technique, called salting passwords Adding bits to a password before it’s hashed so that a rainbow table can’t find a matching hash value to decipher the password. See also rainbow table. , alters hash values, which makes cracking passwords more difficult.\n\nTip\n\nFor more information on salting passwords, see http://web.cs.du.edu/~mitchell/forensics/information/pass_crack.html and https://crackstation.net/hashing-security.htm.\n\nIt should be noted that algorithms for password encryption vary from simple to complex. When attempting to crack a password, research the encryption method used by the application or OS. You might be able to identify known weaknesses that could help you determine the password."
                }
              ],
              "interactive_activity": {
                "title": "Addressing Data-Hiding Techniques (Interactive Activity)",
                "toc_id": 333,
                "slides_allocated": 1,
                "seq_id": 22
              },
              "seq_id": 14,
              "chunks_sorted": [
                4657,
                4658
              ],
              "content": "Addressing Data-Hiding Techniques\n\nData hiding involves changing or manipulating a file to conceal information. Data-hiding techniques include hiding entire partitions, changing file extensions, setting file attributes to hidden, bit-shifting, using encryption, and setting up password protection. Some of these techniques are discussed in the following sections."
            },
            {
              "title": "An Overview of Virtual Machine Forensics",
              "toc_id": 349,
              "chunk_count": 7,
              "total_chunks_in_branch": 176,
              "budget_slides_content": 11,
              "direct_slides_content": 0,
              "total_slides_in_branch": 11,
              "time_allocation_minutes": {
                "direct_content_time": 0,
                "direct_interactive_time": 5,
                "total_branch_time": 35
              },
              "children": [
                {
                  "title": "Type 2 Hypervisors",
                  "toc_id": 350,
                  "chunk_count": 6,
                  "total_chunks_in_branch": 32,
                  "budget_slides_content": 2,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 1,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 3
                  },
                  "children": [
                    {
                      "title": "Parallels Desktop",
                      "toc_id": 351,
                      "chunk_count": 2,
                      "total_chunks_in_branch": 2,
                      "budget_slides_content": 0,
                      "direct_slides_content": 0,
                      "total_slides_in_branch": 0,
                      "time_allocation_minutes": {
                        "direct_content_time": 0,
                        "direct_interactive_time": 0,
                        "total_branch_time": 0
                      },
                      "children": [],
                      "seq_id": 25,
                      "chunks_sorted": [
                        4963,
                        4964
                      ],
                      "content": "Parallels Desktop\n\nParallels Desktop (www.parallels.com/products/desktop/) was created for Macintosh users who also use Windows applications. It runs both legacy and current Windows OSs as well as Linux. Unlike most type 2 hypervisors, it isn’t free but is generally under US$100."
                    },
                    {
                      "title": "KVM",
                      "toc_id": 352,
                      "chunk_count": 2,
                      "total_chunks_in_branch": 2,
                      "budget_slides_content": 0,
                      "direct_slides_content": 0,
                      "total_slides_in_branch": 0,
                      "time_allocation_minutes": {
                        "direct_content_time": 0,
                        "direct_interactive_time": 0,
                        "total_branch_time": 0
                      },
                      "children": [],
                      "seq_id": 26,
                      "chunks_sorted": [
                        4965,
                        4966
                      ],
                      "content": "KVM\n\nThe KVM (Kernel-based Virtual Machine; www.linux-kvm.org/page/Main_Page) hypervisor is for the Linux OS. This open-source hypervisor enables you to choose between an Intel and an AMD CPU and to run Linux or Windows VMs. It’s now included as part of most Linux kernels. Like many type 2 hypervisors, it supplies virtualized hardware, such as graphics cards and network adapters. The version from Red Hat deploys it as a type I hypervisor."
                    },
                    {
                      "title": "Microsoft Hyper-V",
                      "toc_id": 353,
                      "chunk_count": 2,
                      "total_chunks_in_branch": 2,
                      "budget_slides_content": 0,
                      "direct_slides_content": 0,
                      "total_slides_in_branch": 0,
                      "time_allocation_minutes": {
                        "direct_content_time": 0,
                        "direct_interactive_time": 0,
                        "total_branch_time": 0
                      },
                      "children": [],
                      "seq_id": 27,
                      "chunks_sorted": [
                        4967,
                        4968
                      ],
                      "content": "Microsoft Hyper-V\n\nMicrosoft began its venture into virtualization with Virtual PC, which allowed you to create VMs that could run non-Windows OSs. Its new hypervisor is built into Windows 10, and unlike most programs, it isn’t downloaded. To install it, go to Windows PowerShell and enter Enable-WindowsOptionalFeature -Online -FeatureName:Microsoft-Hyper-V -All. (This command doesn’t work in the Home Edition of Windows, however.) After it’s installed, you can create virtual machines in Hyper-V Manager and create a network for VMs to access the Internet."
                    },
                    {
                      "title": "VMware Workstation and Workstation Player",
                      "toc_id": 354,
                      "chunk_count": 14,
                      "total_chunks_in_branch": 14,
                      "budget_slides_content": 1,
                      "direct_slides_content": 1,
                      "total_slides_in_branch": 1,
                      "time_allocation_minutes": {
                        "direct_content_time": 3,
                        "direct_interactive_time": 0,
                        "total_branch_time": 3
                      },
                      "children": [],
                      "seq_id": 28,
                      "chunks_sorted": [
                        4969,
                        4970,
                        4971,
                        4972,
                        4973,
                        4974,
                        4975,
                        4976,
                        4977,
                        4978,
                        4979,
                        4980,
                        4981,
                        4982
                      ],
                      "content": "VMware Workstation and Workstation Player\n\nVMware Workstation (www.vmware.com/products/workstation) is a solid workhorse, and although the standard version isn’t free, a trial version is available. Take a look at some of its features:\n\nCan be installed on almost any device, including tablets\n\nCan install Microsoft Hyper-V Server on it\n\nCan create encrypted VMs\n\nCapable of supporting up to 16 CPUs, 8 TB of storage, and 20 virtual networks\n\nNote\n\nMost current hypervisors can encrypt VMs to send sensitive information to clients. They can also be used to send new or proprietary software for testing to clients.\n\nOlder versions of VMware Player could run only VMs that had already been created. Newer versions, however, allow you to create and run VMs but not connect to other devices. You can download VMware Workstation and Workstation Player from the VMware Web site (www.vmware.com). When installing VMware Workstation Player, be sure to select the option for installing VMware Tools, which adds sharing folders with the host, dragging and dropping, and other features to make working with VMs easier.\n\nFigure 10-2 shows the default location of files for a Windows installation of VMware Workstation Player. On a Linux installation, the files are in the /var/lib/vmware/virtual machines directory. Table 10-1 lists some files associated with VMware. For more information on VMware Workstation, go to www.vmware.com/products/workstation.html.\n\nTable 10-1. Files Associated with VMware\n\nFile extension Description .vmx Stores configuration files .log Contains logs of information such as\nwhen a VM was powered off, virtual appliances added, and so on .nvram Keeps track of the state of a VM’s\nBIOS .vmdk Stores the virtual hard drive’s\ncontents .vmem Stores VM paging files, which serve as\nRAM .vmsd Contains information about\nsnapshots\n\nSource: “Using VMware Workstation - VMware Workstation 12,” 2016, https://docs.vmware.com/en/VMware-Workstation-Player/12.0/workstation-player-12-windows-user-guide.pdf\n\nAfter VMware Workstation Player is installed, you see the opening window shown in Figure 10-3. You can create a VM, open an existing VM, or upgrade to VMware Workstation."
                    },
                    {
                      "title": "VirtualBox",
                      "toc_id": 355,
                      "chunk_count": 6,
                      "total_chunks_in_branch": 6,
                      "budget_slides_content": 0,
                      "direct_slides_content": 0,
                      "total_slides_in_branch": 0,
                      "time_allocation_minutes": {
                        "direct_content_time": 0,
                        "direct_interactive_time": 0,
                        "total_branch_time": 0
                      },
                      "children": [],
                      "seq_id": 29,
                      "chunks_sorted": [
                        4983,
                        4984,
                        4985,
                        4986,
                        4987,
                        4988
                      ],
                      "content": "VirtualBox\n\nOracle VirtualBox (www.virtualbox.org) supports all Windows and Linux OSs as well as Macintosh and Solaris. This shareware can be downloaded and installed on both Windows and Linux host systems. Table 10-2 shows the file types associated with VirtualBox.\n\nTable 10-2. Files associated with VirtualBox\n\nFile extension Description .ova or .ovf File used to create a virtual machine;\nOVF stands for “Open Virtualization Format” .vdi Disk image file .r0 Default libraries .vbox Saved settings of virtual hard\ndrives .vbox-extpack Plug-ins .vbox-prev Backups of VMs .xml-prev Backups of XML settings .log Log files containing information such as\na VM being powered on and off, whether it’s in hibernation mode, virtual\nappliances added, and so on\n\nAs with most other type 2 hypervisors, you can select different virtual hard drive types when you’re creating a VM (see Figure 10-4). VirtualBox, in Expert Mode, even allows selecting types associated with other applications, such as the VMware VMDK type or the Parallels HDD type. Keep in mind, however, that virtual machines created with one type 2 hypervisor might not be able to be read by another. For example, VMware doesn’t read the Parallels format. Later in the chapter, you learn that some virtual hard drive types can’t be mounted as a virtual drive by forensics software, such as Autopsy, OSForensics, and FTK Imager.\n\nType 2 hypervisors also come with templates for different operating systems. For example, if the VM’s filename includes the word “Ubuntu,” the hypervisor assumes it’s running a 64-bit Linux OS. After a VM has been created, several files are associated with it, as you’ve seen in Tables 10-1 and 10-2. Figure 10-5 shows some files associated with a VM running Fedora Linux. The .vbox file stores settings for the virtual hard drive, the .vbox-prev file contains backups of the VM, and the .vhd file contains the VM’s virtual hard drive. There’s also a folder for log files."
                    }
                  ],
                  "seq_id": 24,
                  "chunks_sorted": [
                    4957,
                    4958,
                    4959,
                    4960,
                    4961,
                    4962
                  ],
                  "content": "Type 2 Hypervisors\n\nType 2 hypervisors can be used on a laptop, a desktop, or even a tablet to simulate an OS environment, such as running a Windows Server 2016 VM on a Linux host. Companies often use these hypervisors to run legacy hardware that works only with a specific OS, such as Windows XP. Although VMs should be kept on a separate network, this setup can be a useful solution if hardware replacement costs are beyond a company’s budget.\n\nBefore attempting to install a type 2 hypervisor, you need to enable virtualization in the BIOS before attempting to create a VM. Intel Virtualization Technology (VT) Intel’s CPU design for security and performance enhancements that enable the BIOS to support virtualization. has responded to the need for security and performance by producing different CPU designs. With one design, you must go into the BIOS to enable virtualization (which is a hardware function, not an OS function). The other CPU design doesn’t support virtualization. To determine whether your CPU supports virtualization, first look in Control Panel to find out what type of CPU your device has, and then do a search on this particular CPU at http://ark.intel.com/Products/VirtualizationTechnology. Instruction sets called\n\nparticular CPU at http://ark.intel.com/Products/VirtualizationTechnology. Instruction sets called Virtual Machine Extensions (VMX) Instruction sets created for Intel processors to handle virtualization. are necessary to use virtualization; without these instruction sets, virtualization software doesn’t work. (For a more detailed explanation, refer to www.intel.com/content/www/us/en/virtualization/virtualization-technology/intel-virtualization-technology.html.) Intel has also developed Virtualization Technology for memory virtualization, I/O virtualization, graphics virtualization, and virtualization of network and security functions. The following sections give you an overview of the most widely used type 2 hypervisors.\n\nNote\n\nAs a result of the security risk of people using mobile devices to connect to company networks, a new approach to BYOD was needed. The original limitation on mobile devices and hypervisors was hardware. Most embedded devices and mobile devices used ARM technology, which didn’t support virtualization. With advances in the underlying hardware, this is no longer the case, however. Both type 1 and type 2 hypervisors can be supported on mobile devices. Several approaches are possible, including a CPU virtualization model, an interrupt virtualization model, and a network virtualization model. For an in-depth discussion, see “A Survey of Mobile Device Virtualization: Taxonomy and State of the Art,” ACM Computing Surveys 49:1, Article 1 (April 2016, Shuja J. et al)."
                },
                {
                  "title": "Conducting an Investigation with Type 2 Hypervisors",
                  "toc_id": 356,
                  "chunk_count": 70,
                  "total_chunks_in_branch": 103,
                  "budget_slides_content": 7,
                  "direct_slides_content": 5,
                  "total_slides_in_branch": 7,
                  "time_allocation_minutes": {
                    "direct_content_time": 15,
                    "direct_interactive_time": 0,
                    "total_branch_time": 21
                  },
                  "children": [
                    {
                      "title": "Other VM Examination Methods",
                      "toc_id": 357,
                      "chunk_count": 13,
                      "total_chunks_in_branch": 13,
                      "budget_slides_content": 1,
                      "direct_slides_content": 1,
                      "total_slides_in_branch": 1,
                      "time_allocation_minutes": {
                        "direct_content_time": 3,
                        "direct_interactive_time": 0,
                        "total_branch_time": 3
                      },
                      "children": [],
                      "seq_id": 31,
                      "chunks_sorted": [
                        5059,
                        5060,
                        5061,
                        5062,
                        5063,
                        5064,
                        5065,
                        5066,
                        5067,
                        5068,
                        5069,
                        5070,
                        5071
                      ],
                      "content": "Other VM Examination Methods\n\nIn much the same way that Linux systems mount OSs or peripheral devices, forensics tools can mount VMs as an external drive. FTK Imager, Magnet AXIOM, and OSForensics, for example, have this feature built in. By mounting a VM as a drive, you can make it behave more like a physical computer, which means you can use the standard examination procedures for a static hard drive. Imaging the host machine enables you to retrieve and examine log files as well as associated VM files (for example, .vbox-prev files or .vmdk files) to determine what the VM was used for. You mount a VM as a drive in Hands-On Project 10-1.\n\nAnother method of examining a VM is making a copy of its forensic image and opening this copy while it’s running—in other words, starting it as a live virtual machine. From a forensics standpoint, this method alters the evidence, so it might be considered a nonstandard approach. However, this method makes it possible to run forensics software on the image to search for clues, such as finding malware and penetration-testing tools. For example, typical users shouldn’t have tools such as Metasploit, W3AF, PortSwigger, Cain and Abel, or Wireshark installed on their work machines. These tools can be used to monitor network traffic, conduct brute-force attacks on passwords, perform SQL injections, and so forth. Here are the basic steps for this method:\n\n1.\n\nAcquire a forensic image of the VM, and make a copy of this image.\n\n2.\n\nVerify the copy’s hash value (as you learned in Chapter 3), and then start the VM from the copy and explore its contents.\n\n3.\n\nYour objective is to find evidence you can extract with a forensics software tool. Look for malware or network-monitoring tools, as discussed previously. Document what you find.\n\n4.\n\nCreate a snapshot of the running VM, and then power off the VM and exit the virtualization software.\n\n5.\n\nNow that you have documented what’s on the VM by doing a live examination, follow standard forensics procedures to ensure that the evidence is admissible in court. Open the original forensic image of the VM, and find the malware or tools you discovered in the live analysis. Prepare a written report of your findings."
                    },
                    {
                      "title": "Using VMs as Forensics Tools",
                      "toc_id": 358,
                      "chunk_count": 20,
                      "total_chunks_in_branch": 20,
                      "budget_slides_content": 1,
                      "direct_slides_content": 1,
                      "total_slides_in_branch": 1,
                      "time_allocation_minutes": {
                        "direct_content_time": 3,
                        "direct_interactive_time": 0,
                        "total_branch_time": 3
                      },
                      "children": [],
                      "seq_id": 32,
                      "chunks_sorted": [
                        5072,
                        5073,
                        5074,
                        5075,
                        5076,
                        5077,
                        5078,
                        5079,
                        5080,
                        5081,
                        5082,
                        5083,
                        5084,
                        5085,
                        5086,
                        5087,
                        5088,
                        5089,
                        5090,
                        5091
                      ],
                      "content": "Using VMs as Forensics Tools\n\nIn addition to the many ways VMs can be used, investigators can use them to run forensics tools stored on USB drives. Being able to use a USB drive to acquire an image of a system is convenient. In this section, you set up two VMs on a USB drive, with one running Ubuntu 16.04 and the other running SANS Investigative Forensics Toolkit (SIFT), an open-source VMware appliance with guidelines and procedures for digital investigations. For these activities, you need a 16 GB or larger USB drive. You use VirtualBox because as of this writing, VMware has no portable version.\n\nNote\n\nThe SANS SIFT currently works only with Ubuntu 16.04, so in the next activity, you download and install this version.\n\n1.\n\nMost USB drives still use FAT32, so first reformat the drive as NTFS: Insert the USB drive, open File Explorer, click the USB drive, and do a quick format to NTFS, making sure to set the cluster size to 8192.\n\n2.\n\nStart a Web browser, and go to www.vbox.me. Click the Portable-VirtualBox_v5.0.26-Starter-v6.4.10-Win_all.exe link. Download the *.exe file, and install it on your USB drive.\n\n3.\n\nIn File Explorer, create a folder on your USB drive called VirtualMachine VMs. Next, navigate to your USB drive, and double-click the Portable-VirtualBox.exe file (see Figure 10-12). If necessary, click Yes in the UAC message box.\n\n4.\n\nIn the main Portable-VirtualBox window, click File, Preferences from the menu to open the VirtualBox Settings dialog box. In the right pane, click the Default Machine Folder list arrow, click the VirtualMachine VMs folder you created, and click OK.\n\n5.\n\nTo facilitate the process, copy the Sift-Workstation-Virtual-Machine-Distro version folder to your USB drive. Click File, Import Appliance from the menu. Navigate to the folder you just copied, and click SIFT3-Distro Version.ovf . Click Next and then Import. (Note: At first, nothing seems to happen, and then a predicted time of around 13 hours is suggested. However, the process should finish in less than 30 minutes.)\n\n6.\n\nIn File Explorer, navigate to your USB drive, and open the VirtualMachine VMs folder you created. Then open the vm subfolder, which should contain .vmdk files. Delete the folder you copied from the hard drive to free up room on the USB drive, and then close File Explorer.\n\n7.\n\nIn the VirtualBox main window, click the vm virtual machine, and then click Start. When the virtual machine has started to the SANS SIFT login, type forensics for the password and press Enter. If you get a terminal window with an error message, simply type exit and press Enter.\n\n8.\n\nYou should now be at the main Linux window for SANS SIFT. Notice the available cheatsheets and posters, shown in Figure 10-13. Open a few and examine the information. When you’re done, click the Settings button in the left pane, click Shut Down, and click the Shutdown button to exit the virtual machine."
                    }
                  ],
                  "seq_id": 30,
                  "chunks_sorted": [
                    4989,
                    4990,
                    4991,
                    4992,
                    4993,
                    4994,
                    4995,
                    4996,
                    4997,
                    4998,
                    4999,
                    5000,
                    5001,
                    5002,
                    5003,
                    5004,
                    5005,
                    5006,
                    5007,
                    5008,
                    5009,
                    5010,
                    5011,
                    5012,
                    5013,
                    5014,
                    5015,
                    5016,
                    5017,
                    5018,
                    5019,
                    5020,
                    5021,
                    5022,
                    5023,
                    5024,
                    5025,
                    5026,
                    5027,
                    5028,
                    5029,
                    5030,
                    5031,
                    5032,
                    5033,
                    5034,
                    5035,
                    5036,
                    5037,
                    5038,
                    5039,
                    5040,
                    5041,
                    5042,
                    5043,
                    5044,
                    5045,
                    5046,
                    5047,
                    5048,
                    5049,
                    5050,
                    5051,
                    5052,
                    5053,
                    5054,
                    5055,
                    5056,
                    5057,
                    5058
                  ],
                  "content": "Conducting an Investigation with Type 2 Hypervisors\n\nOn the surface, an investigation involving virtual machines doesn’t differ much from a standard investigation. You begin by acquiring a forensic image of the host computer (the physical machine the VM runs on) as well as network logs. By linking the VM’s IP address to log files, you might be able to determine what Web sites the VM accessed (assuming it’s bridged with a separate IP from the host). After acquiring a forensic image of the host, export associated VM files, such as the ones listed in Tables 10-1 and 10-2. A VM shares the host’s physical devices, such as DVD/CD players and USB drives, and can access files from peripheral devices and shared folders.\n\nDetecting whether virtual machines are on a host computer can be challenging for digital investigators. On a Windows host, you usually look in the Users or Documents folder. On a Linux host, the files might be in /usr/bin/software-center or another folder in the /usr directory. Files associated with VMs, such as log files, should be extracted and examined to determine the crime or incident’s timeline and to find relevant information, such as Web sites and network files that were accessed as well as downloads that occurred from the VM’s IP address, which might include penetration-testing software or malware. Figure 10-6 shows part of a log file, including a VM powering off and other activities.\n\nNote\n\nOlder OSs, such as Windows XP, often have a My Virtual Machines folder.\n\nThe next step is to check the host’s Registry for clues that VMs have been installed or uninstalled. For example, the HKEY_CLASSES_ROOT Registry key contains associations for file extensions. If you see one of the file extensions listed in Tables 10-1 and 10-2, you know to search for a VM. Another clue to a VM being installed is the existence of a virtual network adapter. Figure 10-7 shows the Ethernet connections on a Windows 10 computer, which can be opened by clicking Start, Settings, Network & Internet. Clicking “Change adapter options” displays available network connections (see Figure 10-8). To see all network adapters on a system, you can also use the Windows ipconfig or Linux ifconfig command. In Windows PowerShell, you can also use the Get-VM cmdlet and pipe the output to the\n\ncommand. In Windows PowerShell, you can also use the Get-VM cmdlet and pipe the output to the Get-VMNetworkAdapter cmdlet:\n\nIn VirtualBox, six types of virtual network adapters are possible, such as AMD and Intel Pro adapters. Refer to the user documentation for hypervisor software to find the names of virtual adapters to look for.\n\nIn addition to searching for network adapters, you need to determine whether USB drives have been attached to the host because they could have live VMs running on them. These VMs might have been used to access files and then disconnected without installing anything on the host. A VM can also be nested inside other VMs on the host machine or a USB drive (see Figure 10-9). Some newer Windows systems log when USB drives are attached, but there are other ways to determine whether this happened. After imaging the host’s drive, search the Windows Registry or the system log files.\n\nFollowing a consistent procedure when you’re conducting a forensic analysis of VMs is crucial. Here’s an overview:\n\nImage the host machine.\n\nLocate the virtualization software and VMs, using the information you’ve learned about file extensions and network adapters.\n\nExport from the host machine all files associated with VMs, including log files, virtual adapters, and snapshots.\n\nRecord the hash values of these associated files. Typically, forensics software can perform this task as part of the export function.\n\nNext, you can open a VM as an image file in forensics software and create a forensic image of it or mount the VM as a drive and then image it or do a live search.\n\nLive acquisitions of VMs are often necessary because they include all snapshots. A snapshot simply records the state of a VM at a particular moment. However, it’s recording only changes in state; it’s not a complete backup. Many network administrators depend on snapshots when working with VMs in case updates or software installations fail. When you’re acquiring an image of a VM file, snapshots might not be included, depending on the software you’re using. In this case, you have only the original VM, which might not have any of the changes made to it after it was created. Therefore, doing live acquisitions of VMs is important to make sure snapshots are incorporated.\n\nNote\n\nCreate a Work\\Chap10\\Chapter work folder on your system. The work folder path shown in screenshots might differ slightly from yours.\n\nIf necessary, download VMware Workstation Player from www.vmware.com/products/workstation-player/workstation-player-evaluation.html and install it. You also need FTK Imager Lite, which you installed in Chapter 3. In this activity, you examine your own system for evidence of a VM:\n\n1.\n\nStart FTK Imager Lite, and click File, Add Evidence Item from the menu.\n\n2.\n\nIn the Select Source dialog box, click the Logical Drive option button, and then click Next.\n\n3.\n\nIn the Select Drive dialog box, click the Source Drive Selection list arrow, click the drive where you installed VMware Workstation Player, and then click Finish.\n\n4.\n\nIn the upper-left pane, expand the drive where VMware Workstation Player is installed until you see a folder with “[root]” next to it. Expand this folder, and navigate to the Windows\\System32 folder.\n\n5.\n\nRight-click the config folder and click Export Files.\n\n6.\n\nIn the Browse For Folder dialog box, navigate to and click your work folder, and then click OK. Click OK in the Export Results dialog box, and then exit FTK Imager.\n\n7.\n\nStart OSForensics, and start a new case. When you’re prompted for a case folder, create one under your work folder called InChap10-1.\n\n8.\n\nIn the left pane, click Registry Viewer, which opens to a listing of Registry keys.\n\n9.\n\nClick the Software folder in the right pane and click Open. In the left pane of the window that opens, expand the SOFTWARE node, scroll down, and then expand C:/VMware, Inc. and VMware Drivers. The drivers shown in Figure 10-10 are examples of what you might see in the Registry as evidence of a VM’s presence on the system. Exit OSForensics.\n\nAfter determining that a VM was installed on the host, the next step is finding it. In VMware, you look for files with .vmdk, .vmsd, or .vmx extensions as well as nvram (virtual RAM) files. Next, you need to acquire an image of the VM. Follow these steps:\n\n1.\n\nStart your Web browser, and go to www.ubuntu.com/download/desktop. Download an ISO image of Ubuntu Linux 16.04.\n\n2.\n\nStart VirtualBox. Create a virtual machine named Ubuntu 16.04, and install Ubuntu 16.04 as the guest OS.\n\n3.\n\nStart FTK Imager Lite, and click File, Add Evidence Item from the menu.\n\n4.\n\nIn the Select Source dialog box, click the Image File option button, and then click Next.\n\n5.\n\nClick the Browse button, navigate to \\users\\username\\VirtualBox VMs\\Ubuntu 16.04, click the Ubuntu 16.04 folder, and double-click the .vmdk file. Then click Finish.\n\n6.\n\nClick to expand the Evidence Tree in the left pane. Typically, in an Ubuntu installation, three partitions are listed: partition 1, containing the root partition; partition 5, containing the swap partition (see Figure 10-11); and unallocated space.\n\nTip\n\nIn Linux, the swap partition can be set up as virtual memory. It serves as RAM and might contain important information, such as passwords.\n\n7.\n\nNow that you have the virtual machine file open, acquire an image of it by clicking File, Create Disk Image from the menu.\n\n8.\n\nIn the Select Source dialog box, click the Image File option button, and then click Next.\n\n9.\n\nIn the Select File dialog box, click the Browse button, and then navigate to and double-click the .vmdk file. Click Finish.\n\n10.\n\nIn the Create Image dialog box, click the Add button in the Image Destination section.\n\n11.\n\nIn the Select Image Type dialog box, verify that Raw (dd) is selected for the image format, and then click Next.\n\n12.\n\nIn the Evidence Item Information dialog box, enter today’s date for the evidence number, your name, and any other pertinent information, and then click Next.\n\n13.\n\nIn the Select Image Destination dialog box, click the Browse button, navigate to and click your work folder, and then click OK. In the Image Filename (Excluding Extension) text box, type C10InChap-2. In the Image Fragment Size (MB) text box, type 0 so that FTK Imager Lite doesn’t attempt to break the image file into chunks that fit on a CD.\n\n14.\n\nClick Finish, and then click Start to begin the image acquisition. This process might take a few minutes. When it’s finished, exit FTK Imager Lite. You can then examine the image with the tool of your choice.\n\nNote\n\nIn this activity, an Ubuntu Linux 16.04 virtual machine is used. You should already have VirtualBox installed."
                },
                {
                  "title": "Working with Type 1 Hypervisors",
                  "toc_id": 359,
                  "chunk_count": 34,
                  "total_chunks_in_branch": 34,
                  "budget_slides_content": 2,
                  "direct_slides_content": 2,
                  "total_slides_in_branch": 2,
                  "time_allocation_minutes": {
                    "direct_content_time": 6,
                    "direct_interactive_time": 0,
                    "total_branch_time": 6
                  },
                  "children": [],
                  "seq_id": 33,
                  "chunks_sorted": [
                    5092,
                    5093,
                    5094,
                    5095,
                    5096,
                    5097,
                    5098,
                    5099,
                    5100,
                    5101,
                    5102,
                    5103,
                    5104,
                    5105,
                    5106,
                    5107,
                    5108,
                    5109,
                    5110,
                    5111,
                    5112,
                    5113,
                    5114,
                    5115,
                    5116,
                    5117,
                    5118,
                    5119,
                    5120,
                    5121,
                    5122,
                    5123,
                    5124,
                    5125
                  ],
                  "content": "Working with Type 1 Hypervisors\n\nThis section isn’t intended as complete coverage of type 1 hypervisors and virtual networks; it’s meant to help you understand the impact they have on forensic investigations. Having a good working relationship with network administrators and lead technicians can be extremely helpful in these investigations, particularly when you’re a law enforcement officer or work for an outside company.\n\nType 1 hypervisors are installed directly on hardware, although for testing purposes, you can install them on a VM. Some are freeware, and some are proprietary and quite expensive. The capability of type 1 hypervisors is limited only by the amount of available RAM, storage, and throughput. Most type 1 hypervisors come in different levels, such as free, standard, and enterprise. Each type 1 hypervisor can host from a few to several hundred VMs per host, and the IBM hypervisor can even host thousands of VMs per host. The following are some common type 1 hypervisors:\n\nVMware vSphere (www.vmware.com/products/vsphere.html) in Standard, Enterprise Plus, and Operations Management Enterprise Plus editions\n\nMicrosoft Hyper-V Server 2016 (www.microsoft.com/en-us/evalcenter/evaluate-hyper-v-server-2016)\n\nXenProject XenServer in a free edition (https://xenserver.org/overview-xenserver-open-source-virtualization/download.html) and a commercial version designed for data centers with a free demo (www.citrix.com/downloads/xenserver/)\n\nIBM PowerVM (www-03.ibm.com/systems/power/software/virtualization/) in Introductory, Standard, and Enterprise editions\n\nParallels Desktop for Mac (www.parallels.com/all-products/)\n\nTraining to use these products can be expensive; for example, one week of training on VMware vSphere 6.5 can cost thousands of dollars. To manage these products, you also need a thorough understanding of virtual networks, IP addressing, hardware, and security.\n\nThe two most readily available products are Citrix XenServer and VMware ESXi. In this activity, you install XenServer as a VM in VirtualBox:\n\n1.\n\nStart your Web browser, and go to https://xenserver.org/overview-xenserver-open-source-virtualization/download.html. Download the free ISO image for XenServer, and make note of where you stored this file.\n\n2.\n\nStart VirtualBox, and click the New icon. In the dialog box that opens, type XenServer for the virtual machine name.\n\n3.\n\nClick the Type list arrow, and click Other. Click the Version list arrow, and click Other/Unknown (64 bit). If you aren’t using a 64-bit machine, click Other. Click Next.\n\n4.\n\nFor the memory size, specify 2048 (or higher, around 25% of your available RAM), and then click Next.\n\n5.\n\nClick Create. The Create Virtual Hard Drive dialog box opens. For the hard drive type, click the VMDK (Virtual Machine Disk) option button, and then click Next.\n\n6.\n\nIn the next dialog box, accept the default setting Dynamically allocated for the hard drive, and click Next. In the File location and size window, change the file size to 46 GB (or higher), and then click Create.\n\n7.\n\nIn the Oracle VM VirtualBox Manager window, click the XenServer VM you just created. Click the Settings icon at the top. On the left side, click Storage.\n\n8.\n\nIn the Storage Tree section, click the CD icon. On the right side, you should see a CD icon under Attributes to the right of the CD/DVD Drive label. Click the CD icon, and click Choose a virtual CD/DVD disk file.\n\n9.\n\nNavigate to the folder where the XenServer ISO image is stored, click the XenServer-7.2.0-install-cd.iso file, click Open, and then click OK.\n\n10.\n\nIn the Oracle VM VirtualBox Manager window, click the Start icon, and follow the wizard to install XenServer.\n\n11.\n\nIf you’re prompted to restart, press Enter, and wait for your system to finish restarting. Figure 10-14 shows the XenServer VM.\n\n12.\n\nPower off the XenServer VM, and exit VirtualBox."
                }
              ],
              "interactive_activity": {
                "title": "An Overview of Virtual Machine Forensics (Interactive Activity)",
                "toc_id": 349,
                "slides_allocated": 1,
                "seq_id": 34
              },
              "seq_id": 23,
              "chunks_sorted": [
                4950,
                4951,
                4952,
                4953,
                4954,
                4955,
                4956
              ],
              "content": "An Overview of Virtual Machine Forensics\n\nVirtual machines are now common for both personal and business use, so forensics investigators need to know how to analyze them and use them to analyze suspect drives and systems containing malware. Later in this chapter, you use virtual machines installed on a USB drive to perform live acquisitions on suspect drives.\n\nAs you’ve learned, virtual machines (VMs) help offset hardware costs for companies; in many companies, even full networks are virtual, which reduces costs substantially. VMs are also handy when you want to run legacy or uncommon OSs and software along with the other software on your computer. The software that runs virtual machines is called a “hypervisor.” There are two types of hypervisors: type 1 and type 2. A type 1 hypervisor A virtual machine interface that loads on physical hardware and contains its own OS. runs on “bare metal,” meaning it loads on physical hardware and doesn’t require a separate OS, although many type 1 hypervisors incorporate Linux-based operating systems (explained later in “Working with Type 1 Hypervisors”). Literally thousands of VMs can be hosted on a single\n\nlater in “Working with Type 1 Hypervisors”). Literally thousands of VMs can be hosted on a single type 1 hypervisor and many more on a cluster of these hosts. A type 2 hypervisor A virtual machine interface that’s loaded on top of an existing OS. rests on top of an existing OS, such as Windows, Linux, or macOS. Figure 10-1 illustrates the difference between the two.\n\nWith rising hardware and software costs, companies have to pay careful attention to making the best investments for IT infrastructures. New versions of software require more RAM, hard drive space, and resources, and redeploying new versions of OSs and applications two or three times a year isn’t cost effective. Enter virtual machines, which make it possible for one server to support an entire department or company. With virtual machines in use, a well-equipped workstation or reasonably priced server can take care of all a small company’s needs. For all these reasons, virtual networks are now a standard part of doing business (“Virtual Forensics: A Discussion of Virtual Machines Related to Forensic Analysis,” B. Shavers, 2008,\n\nForensics: A Discussion of Virtual Machines Related to Forensic Analysis,” B. Shavers, 2008, www.forensicfocus.com/downloads/virtual-machines-forensics-analysis.pdf). Large companies might add rack servers that can host literally thousands of VMs. In Chapter 13, you see the challenge VMs pose in cloud forensics.\n\nType 2 hypervisors are usually the ones you find loaded on a suspect machine. Type 1 hypervisors are typically, but not exclusively, loaded on servers or workstations with a lot of RAM and storage. The next sections describe these hypervisors in more detail. Because users tend to be more familiar with type 2 hypervisors, you examine them first before moving on to type 1 hypervisors."
            },
            {
              "title": "Performing Live Acquisitions",
              "toc_id": 360,
              "chunk_count": 15,
              "total_chunks_in_branch": 18,
              "budget_slides_content": 1,
              "direct_slides_content": 1,
              "total_slides_in_branch": 2,
              "time_allocation_minutes": {
                "direct_content_time": 3,
                "direct_interactive_time": 5,
                "total_branch_time": 8
              },
              "children": [
                {
                  "title": "Performing a Live Acquisition in Windows",
                  "toc_id": 361,
                  "chunk_count": 3,
                  "total_chunks_in_branch": 3,
                  "budget_slides_content": 0,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 0,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 0
                  },
                  "children": [],
                  "seq_id": 36,
                  "chunks_sorted": [
                    5141,
                    5142,
                    5143
                  ],
                  "content": "Performing a Live Acquisition in Windows\n\nSeveral tools are available for capturing RAM. For example, Mandiant Memoryze (www.fireeye.com/services/freeware/memoryze.html) lists all open network sockets, including those hidden by rootkits. It also works on both 32-bit and 64-bit systems. Belkasoft RamCapturer (https://belkasoft.com/ram-capturer) is available in 32-bit and 64-bit versions and can run from a USB drive. Another tool is Kali Linux, the updated version of BackTrack (covered in more detail in Chapter 7). It still has more than 300 tools, but outdated or obsolete ones have been eliminated. Kali Linux contains password crackers, network sniffers, and freeware forensics tools. For more details, go to www.kali.org/official-documentation/.\n\nGUI tools are easy to use, but keep in mind that they often require a lot of system resources. In addition, some GUI tools might get false readings in Windows OSs, and command-line tools often give you more control. For these reasons, you should become familiar with some command-line forensics tools, such as Sleuth Kit, introduced in Chapter 7. Covering the more than 300 available command-line tools is beyond the scope of this book, but investigating them on your own is highly recommended."
                }
              ],
              "interactive_activity": {
                "title": "Performing Live Acquisitions (Interactive Activity)",
                "toc_id": 360,
                "slides_allocated": 1,
                "seq_id": 37
              },
              "seq_id": 35,
              "chunks_sorted": [
                5126,
                5127,
                5128,
                5129,
                5130,
                5131,
                5132,
                5133,
                5134,
                5135,
                5136,
                5137,
                5138,
                5139,
                5140
              ],
              "content": "Performing Live Acquisitions\n\nAs you learned in Chapter 3, live acquisitions are especially useful when you’re dealing with active network intrusions and attacks or if you suspect employees are accessing network areas they shouldn’t. Live acquisitions done before taking a system offline are also becoming a necessity because attacks might leave footprints only in running processes or RAM; for example, some malware disappears after a system is restarted. In addition, information in RAM is lost after you turn off a suspect system. However, after you do a live acquisition, information on the system has changed because your actions affect RAM and running processes, which also means the information can’t be reproduced. Therefore, live acquisitions don’t follow typical forensics procedures.\n\nThe problem investigators face is the order of volatility (OOV) A term indicating how long an item on a network lasts. RAM and running processes might last only milliseconds; data stored on hard drives can last for years. , which determines how long a piece of information lasts on a system. Data such as RAM and running processes might exist for only milliseconds; other data, such as files stored on the hard drive, might last for years. The following steps show the general procedure for a live acquisition, although investigators differ on exact steps:\n\n1.\n\nCreate or download a bootable forensic CD or USB drive, and test it before using it on a suspect drive. If the suspect system is on your network and you can access it remotely, add the necessary network forensics tools to your workstation. If not, insert the bootable forensics CD/USB drive in the suspect system.\n\n2.\n\nMake sure you keep a log of all your actions; documenting your actions and reasons for these actions is critical.\n\n3.\n\nA network drive is ideal as a place to send the information you collect. If you don’t have one available, connect an external drive to the suspect system for collecting data. Be sure to note this step in your log.\n\n4.\n\nNext, copy the physical memory (RAM). WindowsScope (www.windowsscope.com), Magnet AXIOM, OSForensics, FTK Imager, and similar tools can copy the RAM for you.\n\n5.\n\nThe next step varies, depending on the incident you’re investigating. With an intrusion, for example, you might want to see whether a rootkit exists by using tools such as Malwarebytes Anti-Rootkit (www.malwarebytes.com/antirootkit/ ) or PC Hunter (www.bleepingcomputer.com/download/pc-hunter/). You can also access the system’s firmware to see whether it has changed, create an image of the drive over the network, or shut down the system and make a static acquisition later.\n\n6.\n\nBe sure to get a forensically sound digital hash value of all files you recover during the live acquisition to make sure they aren’t altered later."
            },
            {
              "title": "Network Forensics Overview",
              "toc_id": 362,
              "chunk_count": 4,
              "total_chunks_in_branch": 65,
              "budget_slides_content": 4,
              "direct_slides_content": 0,
              "total_slides_in_branch": 4,
              "time_allocation_minutes": {
                "direct_content_time": 0,
                "direct_interactive_time": 5,
                "total_branch_time": 14
              },
              "children": [
                {
                  "title": "The Need for Established Procedures",
                  "toc_id": 363,
                  "chunk_count": 4,
                  "total_chunks_in_branch": 4,
                  "budget_slides_content": 0,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 0,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 0
                  },
                  "children": [],
                  "seq_id": 39,
                  "chunks_sorted": [
                    5148,
                    5149,
                    5150,
                    5151
                  ],
                  "content": "The Need for Established Procedures\n\nNetwork forensics examiners must establish standard procedures for how to acquire data after an attack or intrusion incident. Typically, network administrators want to find compromised machines, get them offline, and restore them as quickly as possible to minimize downtime. However, taking the time to follow standard procedures is essential to ensure that all compromised systems have been found and to ascertain attack methods in an effort to prevent them from happening again.\n\nProcedures must be based on an organization’s needs and should complement the network infrastructure. The increase in cybercrimes has prompted many groups to begin compiling procedures and protocols to follow when a network intrusion occurs. Network administrators need to learn how to stop intruders and determine how they got in; what they copied, altered, or deleted; and whether they’re still on the network. To address these needs, NIST created “Guide to Integrating Forensic Techniques into Incident Response” (http://csrc.nist.gov/publications/nistpubs/800-86/SP800-86.pdf, 2006). In addition, the paper “Identifying Critical Features for Network Forensics Investigation Perspectives (Adeyemi, Razak, and Azhan, http://arxiv.org/ftp/arxiv/papers/1210/1210.1645.pdf, 2012) explores network\n\nRazak, and Azhan, http://arxiv.org/ftp/arxiv/papers/1210/1210.1645.pdf, 2012) explores network investigations from the perspectives of the military, law enforcement, and industry. A group from India has also come up with a general framework for network forensics (www.ijcaonline.org/journal/number11/pxc387408.pdf, 2010). These approaches are discussed in more detail in “Developing Procedures for Network Forensics.”"
                },
                {
                  "title": "Securing a Network",
                  "toc_id": 364,
                  "chunk_count": 13,
                  "total_chunks_in_branch": 13,
                  "budget_slides_content": 1,
                  "direct_slides_content": 1,
                  "total_slides_in_branch": 1,
                  "time_allocation_minutes": {
                    "direct_content_time": 3,
                    "direct_interactive_time": 0,
                    "total_branch_time": 3
                  },
                  "children": [],
                  "seq_id": 40,
                  "chunks_sorted": [
                    5152,
                    5153,
                    5154,
                    5155,
                    5156,
                    5157,
                    5158,
                    5159,
                    5160,
                    5161,
                    5162,
                    5163,
                    5164
                  ],
                  "content": "Securing a Network\n\nNetwork forensics is used to determine how a security breach occurred; however, steps must be taken to harden networks before a security breach happens, particularly with recent increases in network attacks, viruses, and other security incidents. Hardening includes a range of tasks, from applying the latest patches to using a layered network defense strategy An approach to network hardening that sets up several network layers to place the most valuable data at the innermost part of the network. , which sets up layers of protection to hide the most valuable data at the innermost part of the network. It also ensures that the deeper into the network an attacker gets, the more difficult access becomes and the more safeguards are in place. The National Security Agency (NSA) developed a similar\n\nand the more safeguards are in place. The National Security Agency (NSA) developed a similar approach, called the defense in depth (DiD) The NSA’s approach to implementing a layered network defense strategy. It focuses on three modes of protection: people, technology, and operations. strategy. DiD has three modes of protection:\n\nPeople\n\nTechnology\n\nOperations\n\nIf one mode of protection fails, the others can be used to thwart the attack. Listing people as a mode of protection means organizations must hire well-qualified people and treat them well so that they have no reason to seek revenge. In addition, organizations should make sure employees are trained adequately in security procedures and are familiar with the organization’s security policy. Physical and personnel security measures are included in this mode of protection.\n\nThe technology mode includes choosing a strong network architecture and using tested tools, such as intrusion detection systems (IDSs) and firewalls. Regular penetration testing coupled with risk assessment can help improve network security, too. Having systems in place that allow quick and thorough analysis when a security breach occurs is also part of the technology mode of protection.\n\nFinally, the operations mode addresses day-to-day operations. Updating security patches, antivirus software, and OSs falls into this category, as does assessment and monitoring procedures and disaster recovery plans.\n\nTip\n\nIf you’re interested in more information on DiD, visit www.nsa.gov/ia/_files/support/defenseindepth.pdf.\n\nTesting networks is as important as testing servers. You need to be up to date on the latest methods intruders use to infiltrate networks as well as methods internal employees use to sabotage networks. In the early and mid-1990s, approximately 70% of network attacks were caused by employees. Since then, this problem has been compounded by contract employees, who often have the same level of network privileges as full-time employees.\n\nIn addition, small companies of fewer than 10 employees often don’t consider security precautions against internal threats necessary, so they can be more susceptible to problems caused by employees revealing proprietary information to competitors. However, increasing use of the Internet has caused a sharp rise in external threats, so internal and external threats are currently about 50-50."
                },
                {
                  "title": "Developing Procedures for Network Forensics",
                  "toc_id": 365,
                  "chunk_count": 8,
                  "total_chunks_in_branch": 30,
                  "budget_slides_content": 2,
                  "direct_slides_content": 1,
                  "total_slides_in_branch": 2,
                  "time_allocation_minutes": {
                    "direct_content_time": 3,
                    "direct_interactive_time": 0,
                    "total_branch_time": 6
                  },
                  "children": [
                    {
                      "title": "Using Network Tools",
                      "toc_id": 367,
                      "chunk_count": 4,
                      "total_chunks_in_branch": 4,
                      "budget_slides_content": 0,
                      "direct_slides_content": 0,
                      "total_slides_in_branch": 0,
                      "time_allocation_minutes": {
                        "direct_content_time": 0,
                        "direct_interactive_time": 0,
                        "total_branch_time": 0
                      },
                      "children": [],
                      "seq_id": 42,
                      "chunks_sorted": [
                        5184,
                        5185,
                        5186,
                        5187
                      ],
                      "content": "Using Network Tools\n\nA variety of tools are available for network administrators to perform remote shutdowns, monitor device use, and more. The tools covered in this chapter are a combination of freeware and enterprise software; some tools have free demo versions.\n\nTools such as Splunk (www.splunk.com), Spiceworks (www.spiceworks.com), Nagios (www.nagios.org), and Cacti (www.cacti.net) help you monitor your network efficiently and thoroughly. For example, you can consult records that the tool generates to prove an employee ran a program without permission. You can also monitor your network and shut down machines or processes that could be harmful.\n\nAlthough these tools are helpful for network administrators, imagine what would happen if an attacker (or even an internal user) could get administrative rights to the network and start using these tools. For example, in a networking class, students had to install their own servers and then harden their systems. One student was able to log on to another student’s server and shut it down remotely because no password for the default user account had been created."
                    },
                    {
                      "title": "Using Packet Analyzers",
                      "toc_id": 368,
                      "chunk_count": 18,
                      "total_chunks_in_branch": 18,
                      "budget_slides_content": 1,
                      "direct_slides_content": 1,
                      "total_slides_in_branch": 1,
                      "time_allocation_minutes": {
                        "direct_content_time": 3,
                        "direct_interactive_time": 0,
                        "total_branch_time": 3
                      },
                      "children": [],
                      "seq_id": 43,
                      "chunks_sorted": [
                        5188,
                        5189,
                        5190,
                        5191,
                        5192,
                        5193,
                        5194,
                        5195,
                        5196,
                        5197,
                        5198,
                        5199,
                        5200,
                        5201,
                        5202,
                        5203,
                        5204,
                        5205
                      ],
                      "content": "Using Packet Analyzers\n\nPacket analyzers Devices and software used to examine network traffic. On TCP/IP networks, they examine packets (hence the name). are devices or software placed on a network to monitor traffic. Most network administrators use them for increasing security and tracking bottlenecks. However, attackers can use them to get information covertly. Most packet analyzers work at Layer 2 or 3 of the OSI model. To understand what’s happening on a network, often you have to look at the higher layers by using custom software that comes with switches and routers, however.\n\nSome analyzers perform packet captures, some are used for analysis, and some handle both tasks. Your organization needs to have policies about using these tools to comply with new federal laws on digital evidence. Windows has many tools capable of capturing and analyzing packets, but you can’t feed the data they collect directly into other tools. Most tools can read anything captured in Pcap (packet capture) format. (Libpcap is the version for Linux, and Winpcap is the version for Windows.) Programs such as tcpdump and Wireshark (www.wireshark.org) use the Pcap format, for example. To take advantage of the strengths in different tools, many investigators do a capture with tcpdump and then analyze the capture in Wireshark.\n\nAs a forensics expert, you must choose the tool that best suits your purposes. For example, if your network is being hit with SYN (the synchronize portion of the TCP handshake) flood attacks, you want to find packets with the SYN flag set. In a SYN flood attack, the attacker keeps asking your server to establish a connection. Although your server can handle thousands of connections, it can handle only a limited number of establishing connections. To find these packets, tcpdump and tethereal (a network protocol analyzer) can be programmed to examine TCP headers to find the SYN flag. Figure 10-15 shows a TCP header; the Flags area contains several flags, including the SYN flag (denoted as S in the figure).\n\nTcpslice (http://sourceforge.net/projects/tcpslice/) is a good tool for extracting information from large Libpcap files; you simply specify the time frame you want to examine. It’s also capable of combining files. A suite of tools called Tcpreplay (http://tcpreplay.appneta.com) can be used to replay network traffic recorded in Libpcap format; you use this information to test network devices, such as IDSs, switches, and routers.\n\nEtherape (http://etherape.sourceforge.net) is a tool for viewing network traffic graphically. Another GUI tool, Netdude (http://netdude.sourceforge.net/), was designed as an easy-to-use interface for inspecting and analyzing large tcpdump files (sometimes several gigabytes). Argus (www.qosient.com/argus) is a session data probe, collector, and analysis tool. This real-time flow monitor can be used for security, accounting, and network management.\n\nWireshark can be used in a real-time environment to open saved trace files from packet captures. An important feature is its capability to rebuild sessions. To use this feature, right-click a frame in the upper pane and click Follow TCP Stream. Wireshark then traces the packets associated with an exploit. To see how this tool works, download the most recent version of Wireshark for Windows (www.wireshark.org/download.html) and install it on your workstation. Then follow these steps:\n\n1.\n\nStart Wireshark, Notice the list of networks with traffic (see Figure 10-16).\n\n2.\n\nDouble-click a network that’s showing activity. (If you’re not on a live network, ping another student or yourself and visit some Web sites and download a file to generate traffic. Then start this activity again.)\n\n3.\n\nAfter the trace has been loaded, scroll through the upper pane until you see a UDP frame or an SSOP frame. Right-click the frame, point to Follow, and click UDP Stream. You should see a window similar to Figure 10-17.\n\n4.\n\nAfter several frames have been captured, click Stop.\n\n5.\n\nReview the information in this window, and then exit Wireshark.\n\nYou can find information on network forensics tools at many of the Web sites mentioned in this chapter. If you’re interested in learning even more about network forensics, the next section covers the Honeynet Project."
                    }
                  ],
                  "seq_id": 41,
                  "chunks_sorted": [
                    5165,
                    5166,
                    5167,
                    5168,
                    5169,
                    5170,
                    5171,
                    5172
                  ],
                  "content": "Developing Procedures for Network Forensics\n\nAs you have seen, log files are often examined along with forensic image files collected from devices. To get these files, you need to establish a good working relationship with network administrators and technicians. Network forensics can be a long, tedious process, and unfortunately, the trail can go cold quickly. A standard procedure often used in network forensics is as follows:\n\nAlways use a standard installation image for systems on a network. This image isn’t a bit-stream image but an image containing all the standard applications used. You should also have MD5 and SHA-1 hash values of all application and OS files.\n\nWhen an intrusion incident happens, make sure the vulnerability has been fixed to prevent other attacks from taking advantage of the opening.\n\nAttempt to retrieve all volatile data, such as RAM and running processes, by doing a live acquisition before turning the system off.\n\nAcquire the compromised drive and make a forensic image of it.\n\nCompare files on the forensic image with the original installation image. Compare hash values of common files, such as Win.exe and standard dynamic link libraries (DLLs), and ascertain whether they have changed.\n\nIn digital forensics, you can work from the image to find most of the deleted or hidden files and partitions. Sometimes you restore the image to a physical drive so that you can run programs on the drive. In network forensics, you have to restore the drive to see how malware that attackers have installed on the system works. For example, intruders might have transmitted a Trojan program that gives them access to the system and then installed a rootkit, which is a collection of tools that can perform network reconnaissance tasks (using the ls or netstat command to collect information, for instance), keylogging, and other actions."
                },
                {
                  "title": "Investigating Virtual Networks",
                  "toc_id": 369,
                  "chunk_count": 7,
                  "total_chunks_in_branch": 7,
                  "budget_slides_content": 0,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 0,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 0
                  },
                  "children": [],
                  "seq_id": 44,
                  "chunks_sorted": [
                    5206,
                    5207,
                    5208,
                    5209,
                    5210,
                    5211,
                    5212
                  ],
                  "content": "Investigating Virtual Networks\n\nAn article in the Journal of Cybersecurity explores how to modify the investigation approach that’s used in physical networks so that it applies to virtual or logical networks (www.riverpublishers.com/journal/journal_articles/RP_Journal_2245-1439_522.pdf). A virtual switch is a little different from a physical switch, in that there’s no spanning tree between virtual switches. For example, say that 24 students each create a virtual network, using a 192.168.x.x network on the type 1 hypervisor, such as vSphere. The numbering isn’t unique to their network, but the networks don’t overlap because each has its own virtual switch. There’s no way to connect the virtual switches, and they don’t share the same physical adapters. If there were a physical adapter, the students would have to worry\n\nthe same physical adapters. If there were a physical adapter, the students would have to worry about subnets, which could cause problems, such as a server on Student A’s network having the same IP address as one on Student B’s network.\n\nThis feature of virtual switches grew out of people needing VMs on isolated networks but residing on the same physical rack server as other virtual networks. An additional complication is that hypervisors, including Xen Server, can assign MAC addresses to virtual devices, and devices can have the same MAC address on different virtual networks. So Student A’s VM can have a virtual Ethernet adapter or virtual network interface card with the same IP address and same MAC address as an adapter on Student B’s network and even Student C’s network. Each student network can’t detect other student networks because of the virtual switches, which enables each student to create large networks independent of other students and is limited only by the allotted RAM and storage the student’s login provides.\n\nof other students and is limited only by the allotted RAM and storage the student’s login provides. In this setup, you could have 24 NICs with the same IP address and MAC address that are on different networks.\n\nTo take this to the next level, say you’re dealing with a cloud service provider (CSP) that hosts networks for several to hundreds of companies. As stated in the Journal of Cybersecurity article cited at the beginning of this section, network forensics investigations in the cloud are hampered by the very qualities that make the cloud appealing—elasticity and flexibility. If needed (and it’s allowed in the service level agreement), a new server can come online to deal with load balancing. In addition, automatic failovers are in place, which may or may not be in the same physical location as the server. Add to that hundreds or even thousands of NICs with the same IP address and MAC address, and you can see that traditional physical network forensics can’t handle these arrangements.\n\nWireshark and Network Miner are two tools that are capable of analyzing virtual networks. As these networks become more complex, newer or updated tools will be needed."
                },
                {
                  "title": "Examining the Honeynet Project",
                  "toc_id": 370,
                  "chunk_count": 7,
                  "total_chunks_in_branch": 7,
                  "budget_slides_content": 0,
                  "direct_slides_content": 0,
                  "total_slides_in_branch": 0,
                  "time_allocation_minutes": {
                    "direct_content_time": 0,
                    "direct_interactive_time": 0,
                    "total_branch_time": 0
                  },
                  "children": [],
                  "seq_id": 45,
                  "chunks_sorted": [
                    5213,
                    5214,
                    5215,
                    5216,
                    5217,
                    5218,
                    5219
                  ],
                  "content": "Examining the Honeynet Project\n\nThe Honeynet Project (www.honeynet.org) was developed to make information widely available in an attempt to thwart Internet and network attackers. Many people participate in this worldwide project, which is now a nonprofit organization. The objectives are awareness, information, and tools. The first step is to make people and organizations aware that threats exist and they might be targets. The second is to provide information on how to protect against these threats, including how attackers operate, how they communicate, and what tactics they use. Finally, for people who want to do their own research, the Honeynet Project offers tools and methods.\n\nA major threat is distributed denial-of-service (DDoS) A type of DoS attack in which other online machines are used, without the owners’ knowledge, to launch an attack. attacks. A trace of a DDoS attack might go through other organizations’ networks, not just yours or your ISP’s. In DDoS attacks, hundreds or even thousands of machines can be used. These machines are known as zombies Computers used without the owners’ knowledge in a DDoS attack. because they have unwittingly become part of the attack. When the first DDoS attacks began, the main concerns were the high monetary impact and the amount of time it took to track down these attacks.\n\nAnother major threat is zero day attacks Attacks launched before vendors or network administrators have discovered vulnerabilities and patches for them have been released. . Attackers look for holes in networks and OSs and exploit these weaknesses before patches are available. Vendors usually aren’t aware that these vulnerabilities exist, so they haven’t developed and released patches for them. Penetration testers attempt to break into networks to find undiscovered vulnerabilities and then predict where the next onslaught of network attacks will come from.\n\nIn any organization, you have to determine the value of the data you’re protecting and weigh it against the price of the defense system you plan to install. When an attack strikes, your first response is to stop it and prevent it from going further. Then you need to see what defense procedures worked and what additional procedures might be needed. Training and informing IT staff are critical.\n\nThe Honeynet Project was set up as a resource to help network administrators deal with DDoS and other attacks. It involves installing honeypots and honeywalls at different locations in the world. A honeypot A computer or network set up to lure an attacker. is a computer set up to look like any other machine on your network; its purpose is to lure attackers to your network, but it contains no information of real value. You can take the honeypot offline to analyze it and not affect the running of your network. Honeywalls Intrusion prevention and monitoring systems that track what attackers do on honeypots. are computers set up to monitor what’s happening to honeypots on your network and record what attackers are doing (see www.honeynet.org/papers/cdrom/). Honeypots and honeywalls are\n\nrecord what attackers are doing (see www.honeynet.org/papers/cdrom/). Honeypots and honeywalls are commonly used to attract intruders and see what they’re attempting to do on a network."
                }
              ],
              "interactive_activity": {
                "title": "Network Forensics Overview (Interactive Activity)",
                "toc_id": 362,
                "slides_allocated": 1,
                "seq_id": 46
              },
              "seq_id": 38,
              "chunks_sorted": [
                5144,
                5145,
                5146,
                5147
              ],
              "content": "Network Forensics Overview\n\nNetwork forensics The process of collecting and analyzing raw network data and systematically tracking network traffic to determine how security incidents occur. is the process of collecting and analyzing raw network data and tracking network traffic systematically to ascertain how an attack was carried out or how an event occurred on a network. Because network attacks are on the rise, there’s more focus on this field and an increasing demand for skilled technicians. Labor forecasts predict a shortfall of network forensics specialists in law enforcement, legal firms, companies, and universities.\n\nWhen intruders break into a network, they leave a trail. Being able to spot variations in network traffic can help you track intrusions, so knowing your network’s typical traffic patterns is important. For example, if a company’s peak use is typically between 6 a.m. and 6 p.m., that’s when you should expect spikes. If a usage spike occurs during the night, the network administrator should recognize it as unusual activity and take steps to investigate it.\n\nNetwork forensics can also help you determine whether a network is truly under attack or a user has inadvertently installed an untested patch or custom program, for example. A lot of time and resources can be wasted determining that a bug in a custom program or an untested open-source program caused an “attack.”"
            }
          ]
        },
        {
          "section_type": "Summary",
          "content": {
            "title": "Summary & Key Takeaways",
            "placeholder": "Auto-generate based on covered topics."
          },
          "seq_id": 47
        },
        {
          "section_type": "End",
          "content": {
            "title": "Thank You",
            "text": "Questions?"
          },
          "seq_id": 48
        }
      ]
    }
  ]
}